Name:         backstages.rhdh.redhat.com
Namespace:    
Labels:       olm.managed=true
              operators.coreos.com/rhdh.rhdh-operator=
Annotations:  controller-gen.kubebuilder.io/version: v0.14.0
              operatorframework.io/installed-alongside-9807ad66ced0da2e: rhdh-operator/rhdh-operator.v1.7.0
API Version:  apiextensions.k8s.io/v1
Kind:         CustomResourceDefinition
Metadata:
  Creation Timestamp:  2025-09-11T20:45:11Z
  Generation:          1
  Resource Version:    76040
  UID:                 81688e49-aadd-469e-9e6f-6b3b54bf4248
Spec:
  Conversion:
    Strategy:  None
  Group:       rhdh.redhat.com
  Names:
    Kind:       Backstage
    List Kind:  BackstageList
    Plural:     backstages
    Singular:   backstage
  Scope:        Namespaced
  Versions:
    Deprecated:           true
    Deprecation Warning:  Since 1.3.0 spec.application.image, spec.application.replicas, spec.application.imagePullSecrets are deprecated in favor of corresponding spec.deployment fields
    Name:                 v1alpha1
    Schema:
      openAPIV3Schema:
        Description:  Backstage is the Schema for the Red Hat Developer Hub backstages API.
It comes with pre-built plug-ins, configuration settings, and deployment mechanisms,
which can help streamline the process of setting up a self-managed internal
developer portal for adopters who are just starting out.
        Properties:
          API Version:
            Description:  APIVersion defines the versioned schema of this representation of an object.
Servers should convert recognized schemas to the latest internal value, and
may reject unrecognized values.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            Type:  string
          Kind:
            Description:  Kind is a string value representing the REST resource this object represents.
Servers may infer this from the endpoint the client submits requests to.
Cannot be updated.
In CamelCase.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            Type:  string
          Metadata:
            Type:  object
          Spec:
            Description:  BackstageSpec defines the desired state of Backstage
            Properties:
              Application:
                Description:  Configuration for Backstage. Optional.
                Properties:
                  App Config:
                    Description:  References to existing app-configs ConfigMap objects, that will be mounted as files in the specified mount path.
Each element can be a reference to any ConfigMap or Secret,
and will be mounted inside the main application container under a specified mount directory.
Additionally, each file will be passed as a `--config /mount/path/to/configmap/key` to the
main container args in the order of the entries defined in the AppConfigs list.
But bear in mind that for a single ConfigMap element containing several filenames,
the order in which those files will be appended to the main container args cannot be guaranteed.
So if you want to pass multiple app-config files, it is recommended to pass one ConfigMap per app-config file.
                    Properties:
                      Config Maps:
                        Description:  List of ConfigMaps storing the app-config files. Will be mounted as files under the MountPath specified.
For each item in this array, if a key is not specified, it means that all keys in the ConfigMap will be mounted as files.
Otherwise, only the specified key will be mounted as a file.
Bear in mind not to put sensitive data in those ConfigMaps. Instead, your app-config content can reference
environment variables (which you can set with the ExtraEnvs field) and/or include extra files (see the ExtraFiles field).
More details on https://backstage.io/docs/conf/writing/.
                        Items:
                          Properties:
                            Key:
                              Description:  Key in the object
                              Type:         string
                            Name:
                              Description:  Name of the object
We support only ConfigMaps and Secrets.
                              Type:  string
                          Required:
                            name
                          Type:  object
                        Type:    array
                      Mount Path:
                        Default:      /opt/app-root/src
                        Description:  Mount path for all app-config files listed in the ConfigMapRefs field
                        Type:         string
                    Type:             object
                  Dynamic Plugins Config Map Name:
                    Description:  Reference to an existing ConfigMap for Dynamic Plugins.
A new one will be generated with the default config if not set.
The ConfigMap object must have an existing key named: 'dynamic-plugins.yaml'.
                    Type:  string
                  Extra Envs:
                    Description:  Extra environment variables
                    Properties:
                      Config Maps:
                        Description:  List of references to ConfigMaps objects to inject as additional environment variables.
For each item in this array, if a key is not specified, it means that all keys in the ConfigMap will be injected as additional environment variables.
Otherwise, only the specified key will be injected as an additional environment variable.
                        Items:
                          Properties:
                            Key:
                              Description:  Key in the object
                              Type:         string
                            Name:
                              Description:  Name of the object
We support only ConfigMaps and Secrets.
                              Type:  string
                          Required:
                            name
                          Type:  object
                        Type:    array
                      Envs:
                        Description:  List of name and value pairs to add as environment variables.
                        Items:
                          Properties:
                            Name:
                              Description:  Name of the environment variable
                              Type:         string
                            Value:
                              Description:  Value of the environment variable
                              Type:         string
                          Required:
                            name
                            value
                          Type:  object
                        Type:    array
                      Secrets:
                        Description:  List of references to Secrets objects to inject as additional environment variables.
For each item in this array, if a key is not specified, it means that all keys in the Secret will be injected as additional environment variables.
Otherwise, only the specified key will be injected as environment variable.
                        Items:
                          Properties:
                            Key:
                              Description:  Key in the object
                              Type:         string
                            Name:
                              Description:  Name of the object
We support only ConfigMaps and Secrets.
                              Type:  string
                          Required:
                            name
                          Type:  object
                        Type:    array
                    Type:        object
                  Extra Files:
                    Description:  References to existing Config objects to use as extra config files.
They will be mounted as files in the specified mount path.
Each element can be a reference to any ConfigMap or Secret.
                    Properties:
                      Config Maps:
                        Description:  List of references to ConfigMaps objects mounted as extra files under the MountPath specified.
For each item in this array, if a key is not specified, it means that all keys in the ConfigMap will be mounted as files.
Otherwise, only the specified key will be mounted as a file.
                        Items:
                          Properties:
                            Key:
                              Description:  Key in the object
                              Type:         string
                            Name:
                              Description:  Name of the object
We support only ConfigMaps and Secrets.
                              Type:  string
                          Required:
                            name
                          Type:  object
                        Type:    array
                      Mount Path:
                        Default:      /opt/app-root/src
                        Description:  Mount path for all extra configuration files listed in the Items field
                        Type:         string
                      Secrets:
                        Description:  List of references to Secrets objects mounted as extra files under the MountPath specified.
For each item in this array, a key must be specified that will be mounted as a file.
                        Items:
                          Properties:
                            Key:
                              Description:  Key in the object
                              Type:         string
                            Name:
                              Description:  Name of the object
We support only ConfigMaps and Secrets.
                              Type:  string
                          Required:
                            name
                          Type:  object
                        Type:    array
                    Type:        object
                  Image:
                    Description:  Custom image to use in all containers (including Init Containers).
It is your responsibility to make sure the image is from trusted sources and has been validated for security compliance
                    Type:  string
                  Image Pull Secrets:
                    Description:  Image Pull Secrets to use in all containers (including Init Containers)
                    Items:
                      Type:  string
                    Type:    array
                  Replicas:
                    Default:      1
                    Description:  Number of desired replicas to set in the Backstage Deployment.
Defaults to 1.
                    Format:  int32
                    Type:    integer
                  Route:
                    Description:  Route configuration. Used for OpenShift only.
                    Properties:
                      Enabled:
                        Default:      true
                        Description:  Control the creation of a Route on OpenShift.
                        Type:         boolean
                      Host:
                        Description:  Host is an alias/DNS that points to the service. Optional.
Ignored if Enabled is false.
If not specified a route name will typically be automatically
chosen.  Must follow DNS952 subdomain conventions.
                        Max Length:  253
                        Pattern:     ^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]))*$
                        Type:        string
                      Subdomain:
                        Description:  Subdomain is a DNS subdomain that is requested within the ingress controller's
domain (as a subdomain).
Ignored if Enabled is false.
Example: subdomain `frontend` automatically receives the router subdomain
`apps.mycluster.com` to have a full hostname `frontend.apps.mycluster.com`.
                        Max Length:  253
                        Pattern:     ^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]))*$
                        Type:        string
                      Tls:
                        Description:  The tls field provides the ability to configure certificates for the route.
Ignored if Enabled is false.
                        Properties:
                          Ca Certificate:
                            Description:  caCertificate provides the cert authority certificate contents
                            Type:         string
                          Certificate:
                            Description:  certificate provides certificate contents. This should be a single serving certificate, not a certificate
chain. Do not include a CA certificate.
                            Type:  string
                          External Certificate Secret Name:
                            Description:  ExternalCertificateSecretName provides certificate contents as a secret reference.
This should be a single serving certificate, not a certificate
chain. Do not include a CA certificate. The secret referenced should
be present in the same namespace as that of the Route.
Forbidden when `certificate` is set.
Note that securing Routes with external certificates in TLS secrets is a Technology Preview feature in OpenShift,
and requires enabling the `RouteExternalCertificate` OpenShift Feature Gate and might not be functionally complete.
                            Type:  string
                          Key:
                            Description:  key provides key file contents
                            Type:         string
                        Type:             object
                    Type:                 object
                Type:                     object
              Database:
                Description:  Configuration for database access. Optional.
                Properties:
                  Auth Secret Name:
                    Description:  Name of the secret for database authentication. Optional.
For a local database deployment (EnableLocalDb=true), a secret will be auto generated if it does not exist.
The secret shall include information used for the database access.
An example for PostgreSQL DB access:
"POSTGRES_PASSWORD": "rl4s3Fh4ng3M4"
"POSTGRES_PORT": "5432"
"POSTGRES_USER": "postgres"
"POSTGRESQL_ADMIN_PASSWORD": "rl4s3Fh4ng3M4"
"POSTGRES_HOST": "backstage-psql-bs1"  # For local database, set to "backstage-psql-<CR name>".
                    Type:  string
                  Enable Local Db:
                    Default:      true
                    Description:  Control the creation of a local PostgreSQL DB. Set to false if using for example an external Database for Backstage.
                    Type:         boolean
                Type:             object
              Raw Runtime Config:
                Description:  Raw Runtime RuntimeObjects configuration. For Advanced scenarios.
                Properties:
                  Backstage Config:
                    Description:  Name of ConfigMap containing Backstage runtime objects configuration
                    Type:         string
                  Local Db Config:
                    Description:  Name of ConfigMap containing LocalDb (PostgreSQL) runtime objects configuration
                    Type:         string
                Type:             object
            Type:                 object
          Status:
            Description:  BackstageStatus defines the observed state of Backstage
            Properties:
              Conditions:
                Description:  Conditions is the list of conditions describing the state of the runtime
                Items:
                  Description:  Condition contains details for one aspect of the current state of this API Resource.
---
This struct is intended for direct use as an array at the field path .status.conditions.  For example,


  type FooStatus struct{
      // Represents the observations of a foo's current state.
      // Known .status.conditions.type are: "Available", "Progressing", and "Degraded"
      // +patchMergeKey=type
      // +patchStrategy=merge
      // +listType=map
      // +listMapKey=type
      Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`


      // other fields
  }
                  Properties:
                    Last Transition Time:
                      Description:  lastTransitionTime is the last time the condition transitioned from one status to another.
This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      Format:  date-time
                      Type:    string
                    Message:
                      Description:  message is a human readable message indicating details about the transition.
This may be an empty string.
                      Max Length:  32768
                      Type:        string
                    Observed Generation:
                      Description:  observedGeneration represents the .metadata.generation that the condition was set based upon.
For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
with respect to the current state of the instance.
                      Format:   int64
                      Minimum:  0
                      Type:     integer
                    Reason:
                      Description:  reason contains a programmatic identifier indicating the reason for the condition's last transition.
Producers of specific condition types may define expected values and meanings for this field,
and whether the values are considered a guaranteed API.
The value should be a CamelCase string.
This field may not be empty.
                      Max Length:  1024
                      Min Length:  1
                      Pattern:     ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      Type:        string
                    Status:
                      Description:  status of the condition, one of True, False, Unknown.
                      Enum:
                        True
                        False
                        Unknown
                      Type:  string
                    Type:
                      Description:  type of condition in CamelCase or in foo.example.com/CamelCase.
---
Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
useful (see .node.status.conditions), the ability to deconflict is important.
The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      Max Length:  316
                      Pattern:     ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      Type:        string
                  Required:
                    lastTransitionTime
                    message
                    reason
                    status
                    type
                  Type:  object
                Type:    array
            Type:        object
        Type:            object
    Served:              true
    Storage:             false
    Subresources:
      Status:
    Name:  v1alpha2
    Schema:
      openAPIV3Schema:
        Description:  Backstage is the Schema for the Red Hat Developer Hub backstages API.
It comes with pre-built plug-ins, configuration settings, and deployment mechanisms,
which can help streamline the process of setting up a self-managed internal
developer portal for adopters who are just starting out.
        Properties:
          API Version:
            Description:  APIVersion defines the versioned schema of this representation of an object.
Servers should convert recognized schemas to the latest internal value, and
may reject unrecognized values.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            Type:  string
          Kind:
            Description:  Kind is a string value representing the REST resource this object represents.
Servers may infer this from the endpoint the client submits requests to.
Cannot be updated.
In CamelCase.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            Type:  string
          Metadata:
            Type:  object
          Spec:
            Description:  BackstageSpec defines the desired state of Backstage
            Properties:
              Application:
                Description:  Configuration for Backstage. Optional.
                Properties:
                  App Config:
                    Description:  References to existing app-configs ConfigMap objects, that will be mounted as files in the specified mount path.
Each element can be a reference to any ConfigMap or Secret,
and will be mounted inside the main application container under a specified mount directory.
Additionally, each file will be passed as a `--config /mount/path/to/configmap/key` to the
main container args in the order of the entries defined in the AppConfigs list.
But bear in mind that for a single ConfigMap element containing several filenames,
the order in which those files will be appended to the main container args cannot be guaranteed.
So if you want to pass multiple app-config files, it is recommended to pass one ConfigMap per app-config file.
                    Properties:
                      Config Maps:
                        Description:  List of ConfigMaps storing the app-config files. Will be mounted as files under the MountPath specified.
For each item in this array, if a key is not specified, it means that all keys in the ConfigMap will be mounted as files.
Otherwise, only the specified key will be mounted as a file.
Bear in mind not to put sensitive data in those ConfigMaps. Instead, your app-config content can reference
environment variables (which you can set with the ExtraEnvs field) and/or include extra files (see the ExtraFiles field).
More details on https://backstage.io/docs/conf/writing/.
                        Items:
                          Properties:
                            Key:
                              Description:  Key in the object
                              Type:         string
                            Name:
                              Description:  Name of the object
We support only ConfigMaps and Secrets.
                              Type:  string
                          Required:
                            name
                          Type:  object
                        Type:    array
                      Mount Path:
                        Default:      /opt/app-root/src
                        Description:  Mount path for all app-config files listed in the ConfigMapRefs field
                        Type:         string
                    Type:             object
                  Dynamic Plugins Config Map Name:
                    Description:  Reference to an existing ConfigMap for Dynamic Plugins.
A new one will be generated with the default config if not set.
The ConfigMap object must have an existing key named: 'dynamic-plugins.yaml'.
                    Type:  string
                  Extra Envs:
                    Description:  Extra environment variables
                    Properties:
                      Config Maps:
                        Description:  List of references to ConfigMaps objects to inject as additional environment variables.
For each item in this array, if a key is not specified, it means that all keys in the ConfigMap will be injected as additional environment variables.
Otherwise, only the specified key will be injected as an additional environment variable.
                        Items:
                          Properties:
                            Key:
                              Description:  Key in the object
                              Type:         string
                            Name:
                              Description:  Name of the object
We support only ConfigMaps and Secrets.
                              Type:  string
                          Required:
                            name
                          Type:  object
                        Type:    array
                      Envs:
                        Description:  List of name and value pairs to add as environment variables.
                        Items:
                          Properties:
                            Name:
                              Description:  Name of the environment variable
                              Type:         string
                            Value:
                              Description:  Value of the environment variable
                              Type:         string
                          Required:
                            name
                            value
                          Type:  object
                        Type:    array
                      Secrets:
                        Description:  List of references to Secrets objects to inject as additional environment variables.
For each item in this array, if a key is not specified, it means that all keys in the Secret will be injected as additional environment variables.
Otherwise, only the specified key will be injected as environment variable.
                        Items:
                          Properties:
                            Key:
                              Description:  Key in the object
                              Type:         string
                            Name:
                              Description:  Name of the object
We support only ConfigMaps and Secrets.
                              Type:  string
                          Required:
                            name
                          Type:  object
                        Type:    array
                    Type:        object
                  Extra Files:
                    Description:  References to existing Config objects to use as extra config files.
They will be mounted as files in the specified mount path.
Each element can be a reference to any ConfigMap or Secret.
                    Properties:
                      Config Maps:
                        Description:  List of references to ConfigMaps objects mounted as extra files under the MountPath specified.
For each item in this array, if a key is not specified, it means that all keys in the ConfigMap will be mounted as files.
Otherwise, only the specified key will be mounted as a file.
                        Items:
                          Properties:
                            Key:
                              Description:  Key in the object
                              Type:         string
                            Name:
                              Description:  Name of the object
We support only ConfigMaps and Secrets.
                              Type:  string
                          Required:
                            name
                          Type:  object
                        Type:    array
                      Mount Path:
                        Default:      /opt/app-root/src
                        Description:  Mount path for all extra configuration files listed in the Items field
                        Type:         string
                      Secrets:
                        Description:  List of references to Secrets objects mounted as extra files under the MountPath specified.
For each item in this array, a key must be specified that will be mounted as a file.
                        Items:
                          Properties:
                            Key:
                              Description:  Key in the object
                              Type:         string
                            Name:
                              Description:  Name of the object
We support only ConfigMaps and Secrets.
                              Type:  string
                          Required:
                            name
                          Type:  object
                        Type:    array
                    Type:        object
                  Image:
                    Description:  Custom image to use in all containers (including Init Containers).
It is your responsibility to make sure the image is from trusted sources and has been validated for security compliance
                    Type:  string
                  Image Pull Secrets:
                    Description:  Image Pull Secrets to use in all containers (including Init Containers)
                    Items:
                      Type:  string
                    Type:    array
                  Replicas:
                    Default:      1
                    Description:  Number of desired replicas to set in the Backstage Deployment.
Defaults to 1.
                    Format:  int32
                    Type:    integer
                  Route:
                    Description:  Route configuration. Used for OpenShift only.
                    Properties:
                      Enabled:
                        Default:      true
                        Description:  Control the creation of a Route on OpenShift.
                        Type:         boolean
                      Host:
                        Description:  Host is an alias/DNS that points to the service. Optional.
Ignored if Enabled is false.
If not specified a route name will typically be automatically
chosen.  Must follow DNS952 subdomain conventions.
                        Max Length:  253
                        Pattern:     ^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]))*$
                        Type:        string
                      Subdomain:
                        Description:  Subdomain is a DNS subdomain that is requested within the ingress controller's
domain (as a subdomain).
Ignored if Enabled is false.
Example: subdomain `frontend` automatically receives the router subdomain
`apps.mycluster.com` to have a full hostname `frontend.apps.mycluster.com`.
                        Max Length:  253
                        Pattern:     ^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]))*$
                        Type:        string
                      Tls:
                        Description:  The tls field provides the ability to configure certificates for the route.
Ignored if Enabled is false.
                        Properties:
                          Ca Certificate:
                            Description:  caCertificate provides the cert authority certificate contents
                            Type:         string
                          Certificate:
                            Description:  certificate provides certificate contents. This should be a single serving certificate, not a certificate
chain. Do not include a CA certificate.
                            Type:  string
                          External Certificate Secret Name:
                            Description:  ExternalCertificateSecretName provides certificate contents as a secret reference.
This should be a single serving certificate, not a certificate
chain. Do not include a CA certificate. The secret referenced should
be present in the same namespace as that of the Route.
Forbidden when `certificate` is set.
Note that securing Routes with external certificates in TLS secrets is a Technology Preview feature in OpenShift,
and requires enabling the `RouteExternalCertificate` OpenShift Feature Gate and might not be functionally complete.
                            Type:  string
                          Key:
                            Description:  key provides key file contents
                            Type:         string
                        Type:             object
                    Type:                 object
                Type:                     object
              Database:
                Description:  Configuration for database access. Optional.
                Properties:
                  Auth Secret Name:
                    Description:  Name of the secret for database authentication. Optional.
For a local database deployment (EnableLocalDb=true), a secret will be auto generated if it does not exist.
The secret shall include information used for the database access.
An example for PostgreSQL DB access:
"POSTGRES_PASSWORD": "rl4s3Fh4ng3M4"
"POSTGRES_PORT": "5432"
"POSTGRES_USER": "postgres"
"POSTGRESQL_ADMIN_PASSWORD": "rl4s3Fh4ng3M4"
"POSTGRES_HOST": "backstage-psql-bs1"  # For local database, set to "backstage-psql-<CR name>".
                    Type:  string
                  Enable Local Db:
                    Default:      true
                    Description:  Control the creation of a local PostgreSQL DB. Set to false if using for example an external Database for Backstage.
                    Type:         boolean
                Type:             object
              Deployment:
                Description:  Configuration for Backstage Deployment resource.
Optional.
                Properties:
                  Patch:
                    Description:  Valid fragment of Deployment to be merged with default/raw configuration.
Set the Deployment's metadata and|or spec fields you want to override or add.
Optional.
                    X - Kubernetes - Preserve - Unknown - Fields:  true
                Type:                                              object
              Raw Runtime Config:
                Description:  Raw Runtime RuntimeObjects configuration. For Advanced scenarios.
                Properties:
                  Backstage Config:
                    Description:  Name of ConfigMap containing Backstage runtime objects configuration
                    Type:         string
                  Local Db Config:
                    Description:  Name of ConfigMap containing LocalDb (PostgreSQL) runtime objects configuration
                    Type:         string
                Type:             object
            Type:                 object
          Status:
            Description:  BackstageStatus defines the observed state of Backstage
            Properties:
              Conditions:
                Description:  Conditions is the list of conditions describing the state of the runtime
                Items:
                  Description:  Condition contains details for one aspect of the current state of this API Resource.
---
This struct is intended for direct use as an array at the field path .status.conditions.  For example,


  type FooStatus struct{
      // Represents the observations of a foo's current state.
      // Known .status.conditions.type are: "Available", "Progressing", and "Degraded"
      // +patchMergeKey=type
      // +patchStrategy=merge
      // +listType=map
      // +listMapKey=type
      Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`


      // other fields
  }
                  Properties:
                    Last Transition Time:
                      Description:  lastTransitionTime is the last time the condition transitioned from one status to another.
This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      Format:  date-time
                      Type:    string
                    Message:
                      Description:  message is a human readable message indicating details about the transition.
This may be an empty string.
                      Max Length:  32768
                      Type:        string
                    Observed Generation:
                      Description:  observedGeneration represents the .metadata.generation that the condition was set based upon.
For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
with respect to the current state of the instance.
                      Format:   int64
                      Minimum:  0
                      Type:     integer
                    Reason:
                      Description:  reason contains a programmatic identifier indicating the reason for the condition's last transition.
Producers of specific condition types may define expected values and meanings for this field,
and whether the values are considered a guaranteed API.
The value should be a CamelCase string.
This field may not be empty.
                      Max Length:  1024
                      Min Length:  1
                      Pattern:     ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      Type:        string
                    Status:
                      Description:  status of the condition, one of True, False, Unknown.
                      Enum:
                        True
                        False
                        Unknown
                      Type:  string
                    Type:
                      Description:  type of condition in CamelCase or in foo.example.com/CamelCase.
---
Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
useful (see .node.status.conditions), the ability to deconflict is important.
The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      Max Length:  316
                      Pattern:     ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      Type:        string
                  Required:
                    lastTransitionTime
                    message
                    reason
                    status
                    type
                  Type:  object
                Type:    array
            Type:        object
        Type:            object
    Served:              true
    Storage:             false
    Subresources:
      Status:
    Name:  v1alpha3
    Schema:
      openAPIV3Schema:
        Description:  Backstage is the Schema for the Red Hat Developer Hub backstages API.
It comes with pre-built plug-ins, configuration settings, and deployment mechanisms,
which can help streamline the process of setting up a self-managed internal
developer portal for adopters who are just starting out.
        Properties:
          API Version:
            Description:  APIVersion defines the versioned schema of this representation of an object.
Servers should convert recognized schemas to the latest internal value, and
may reject unrecognized values.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            Type:  string
          Kind:
            Description:  Kind is a string value representing the REST resource this object represents.
Servers may infer this from the endpoint the client submits requests to.
Cannot be updated.
In CamelCase.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            Type:  string
          Metadata:
            Type:  object
          Spec:
            Description:  BackstageSpec defines the desired state of Backstage
            Properties:
              Application:
                Description:  Configuration for Backstage. Optional.
                Properties:
                  App Config:
                    Description:  References to existing app-configs ConfigMap objects, that will be mounted as files in the specified mount path.
Each element can be a reference to any ConfigMap or Secret,
and will be mounted inside the main application container under a specified mount directory.
Additionally, each file will be passed as a `--config /mount/path/to/configmap/key` to the
main container args in the order of the entries defined in the AppConfigs list.
But bear in mind that for a single ConfigMap element containing several filenames,
the order in which those files will be appended to the main container args cannot be guaranteed.
So if you want to pass multiple app-config files, it is recommended to pass one ConfigMap per app-config file.
                    Properties:
                      Config Maps:
                        Description:  List of ConfigMaps storing the app-config files. Will be mounted as files under the MountPath specified.
For each item in this array, if a key is not specified, it means that all keys in the ConfigMap will be mounted as files.
Otherwise, only the specified key will be mounted as a file.
Bear in mind not to put sensitive data in those ConfigMaps. Instead, your app-config content can reference
environment variables (which you can set with the ExtraEnvs field) and/or include extra files (see the ExtraFiles field).
More details on https://backstage.io/docs/conf/writing/.
                        Items:
                          Properties:
                            Key:
                              Description:  Key in the object
                              Type:         string
                            Mount Path:
                              Description:  Path to mount the Object. If not specified default-path/Name will be used
                              Type:         string
                            Name:
                              Description:  Name of the object
Supported ConfigMaps and Secrets
                              Type:  string
                          Required:
                            name
                          Type:  object
                        Type:    array
                      Mount Path:
                        Default:      /opt/app-root/src
                        Description:  Mount path for all app-config files listed in the ConfigMapRefs field
                        Type:         string
                    Type:             object
                  Dynamic Plugins Config Map Name:
                    Description:  Reference to an existing ConfigMap for Dynamic Plugins.
A new one will be generated with the default config if not set.
The ConfigMap object must have an existing key named: 'dynamic-plugins.yaml'.
                    Type:  string
                  Extra Envs:
                    Description:  Extra environment variables
                    Properties:
                      Config Maps:
                        Description:  List of references to ConfigMaps objects to inject as additional environment variables.
For each item in this array, if a key is not specified, it means that all keys in the ConfigMap will be injected as additional environment variables.
Otherwise, only the specified key will be injected as an additional environment variable.
                        Items:
                          Properties:
                            Key:
                              Description:  Key in the object
                              Type:         string
                            Name:
                              Description:  Name of the object
We support only ConfigMaps and Secrets.
                              Type:  string
                          Required:
                            name
                          Type:  object
                        Type:    array
                      Envs:
                        Description:  List of name and value pairs to add as environment variables.
                        Items:
                          Properties:
                            Name:
                              Description:  Name of the environment variable
                              Type:         string
                            Value:
                              Description:  Value of the environment variable
                              Type:         string
                          Required:
                            name
                            value
                          Type:  object
                        Type:    array
                      Secrets:
                        Description:  List of references to Secrets objects to inject as additional environment variables.
For each item in this array, if a key is not specified, it means that all keys in the Secret will be injected as additional environment variables.
Otherwise, only the specified key will be injected as environment variable.
                        Items:
                          Properties:
                            Key:
                              Description:  Key in the object
                              Type:         string
                            Name:
                              Description:  Name of the object
We support only ConfigMaps and Secrets.
                              Type:  string
                          Required:
                            name
                          Type:  object
                        Type:    array
                    Type:        object
                  Extra Files:
                    Description:  References to existing Config objects to use as extra config files.
They will be mounted as files in the specified mount path.
Each element can be a reference to any ConfigMap or Secret.
                    Properties:
                      Config Maps:
                        Description:  List of references to ConfigMaps objects mounted as extra files under the MountPath specified.
For each item in this array, if a key is not specified, it means that all keys in the ConfigMap will be mounted as files.
Otherwise, only the specified key will be mounted as a file.
                        Items:
                          Properties:
                            Key:
                              Description:  Key in the object
                              Type:         string
                            Mount Path:
                              Description:  Path to mount the Object. If not specified default-path/Name will be used
                              Type:         string
                            Name:
                              Description:  Name of the object
Supported ConfigMaps and Secrets
                              Type:  string
                          Required:
                            name
                          Type:  object
                        Type:    array
                      Mount Path:
                        Default:      /opt/app-root/src
                        Description:  Mount path for all extra configuration files listed in the Items field
                        Type:         string
                      Pvcs:
                        Description:  List of references to Persistent Volume Claim objects mounted as extra files
For each item in this array, a key must be specified that will be mounted as a file.
                        Items:
                          Properties:
                            Mount Path:
                              Description:  Path to mount PVC. If not specified default-path/Name will be used
                              Type:         string
                            Name:
                              Description:  Name of the object
                              Type:         string
                          Required:
                            name
                          Type:  object
                        Type:    array
                      Secrets:
                        Description:  List of references to Secrets objects mounted as extra files under the MountPath specified.
For each item in this array, a key must be specified that will be mounted as a file.
                        Items:
                          Properties:
                            Key:
                              Description:  Key in the object
                              Type:         string
                            Mount Path:
                              Description:  Path to mount the Object. If not specified default-path/Name will be used
                              Type:         string
                            Name:
                              Description:  Name of the object
Supported ConfigMaps and Secrets
                              Type:  string
                          Required:
                            name
                          Type:  object
                        Type:    array
                    Type:        object
                  Image:
                    Description:  Custom image to use in all containers (including Init Containers).
It is your responsibility to make sure the image is from trusted sources and has been validated for security compliance
                    Type:  string
                  Image Pull Secrets:
                    Description:  Image Pull Secrets to use in all containers (including Init Containers)
                    Items:
                      Type:  string
                    Type:    array
                  Replicas:
                    Default:      1
                    Description:  Number of desired replicas to set in the Backstage Deployment.
Defaults to 1.
                    Format:  int32
                    Type:    integer
                  Route:
                    Description:  Route configuration. Used for OpenShift only.
                    Properties:
                      Enabled:
                        Default:      true
                        Description:  Control the creation of a Route on OpenShift.
                        Type:         boolean
                      Host:
                        Description:  Host is an alias/DNS that points to the service. Optional.
Ignored if Enabled is false.
If not specified a route name will typically be automatically
chosen.  Must follow DNS952 subdomain conventions.
                        Max Length:  253
                        Pattern:     ^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]))*$
                        Type:        string
                      Subdomain:
                        Description:  Subdomain is a DNS subdomain that is requested within the ingress controller's
domain (as a subdomain).
Ignored if Enabled is false.
Example: subdomain `frontend` automatically receives the router subdomain
`apps.mycluster.com` to have a full hostname `frontend.apps.mycluster.com`.
                        Max Length:  253
                        Pattern:     ^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]))*$
                        Type:        string
                      Tls:
                        Description:  The tls field provides the ability to configure certificates for the route.
Ignored if Enabled is false.
                        Properties:
                          Ca Certificate:
                            Description:  caCertificate provides the cert authority certificate contents
                            Type:         string
                          Certificate:
                            Description:  certificate provides certificate contents. This should be a single serving certificate, not a certificate
chain. Do not include a CA certificate.
                            Type:  string
                          External Certificate Secret Name:
                            Description:  ExternalCertificateSecretName provides certificate contents as a secret reference.
This should be a single serving certificate, not a certificate
chain. Do not include a CA certificate. The secret referenced should
be present in the same namespace as that of the Route.
Forbidden when `certificate` is set.
Note that securing Routes with external certificates in TLS secrets is a Technology Preview feature in OpenShift,
and requires enabling the `RouteExternalCertificate` OpenShift Feature Gate and might not be functionally complete.
                            Type:  string
                          Key:
                            Description:  key provides key file contents
                            Type:         string
                        Type:             object
                    Type:                 object
                Type:                     object
              Database:
                Description:  Configuration for database access. Optional.
                Properties:
                  Auth Secret Name:
                    Description:  Name of the secret for database authentication. Optional.
For a local database deployment (EnableLocalDb=true), a secret will be auto generated if it does not exist.
The secret shall include information used for the database access.
An example for PostgreSQL DB access:
"POSTGRES_PASSWORD": "rl4s3Fh4ng3M4"
"POSTGRES_PORT": "5432"
"POSTGRES_USER": "postgres"
"POSTGRESQL_ADMIN_PASSWORD": "rl4s3Fh4ng3M4"
"POSTGRES_HOST": "backstage-psql-bs1"  # For local database, set to "backstage-psql-<CR name>".
                    Type:  string
                  Enable Local Db:
                    Default:      true
                    Description:  Control the creation of a local PostgreSQL DB. Set to false if using for example an external Database for Backstage.
                    Type:         boolean
                Type:             object
              Deployment:
                Description:  Valid fragment of Deployment to be merged with default/raw configuration.
Set the Deployment's metadata and|or spec fields you want to override or add.
Optional.
                Properties:
                  Patch:
                    Description:  Valid fragment of Deployment to be merged with default/raw configuration.
Set the Deployment's metadata and|or spec fields you want to override or add.
Optional.
                    X - Kubernetes - Preserve - Unknown - Fields:  true
                Type:                                              object
              Raw Runtime Config:
                Description:  Raw Runtime RuntimeObjects configuration. For Advanced scenarios.
                Properties:
                  Backstage Config:
                    Description:  Name of ConfigMap containing Backstage runtime objects configuration
                    Type:         string
                  Local Db Config:
                    Description:  Name of ConfigMap containing LocalDb (PostgreSQL) runtime objects configuration
                    Type:         string
                Type:             object
            Type:                 object
          Status:
            Description:  BackstageStatus defines the observed state of Backstage
            Properties:
              Conditions:
                Description:  Conditions is the list of conditions describing the state of the runtime
                Items:
                  Description:  Condition contains details for one aspect of the current state of this API Resource.
---
This struct is intended for direct use as an array at the field path .status.conditions.  For example,


  type FooStatus struct{
      // Represents the observations of a foo's current state.
      // Known .status.conditions.type are: "Available", "Progressing", and "Degraded"
      // +patchMergeKey=type
      // +patchStrategy=merge
      // +listType=map
      // +listMapKey=type
      Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`


      // other fields
  }
                  Properties:
                    Last Transition Time:
                      Description:  lastTransitionTime is the last time the condition transitioned from one status to another.
This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      Format:  date-time
                      Type:    string
                    Message:
                      Description:  message is a human readable message indicating details about the transition.
This may be an empty string.
                      Max Length:  32768
                      Type:        string
                    Observed Generation:
                      Description:  observedGeneration represents the .metadata.generation that the condition was set based upon.
For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
with respect to the current state of the instance.
                      Format:   int64
                      Minimum:  0
                      Type:     integer
                    Reason:
                      Description:  reason contains a programmatic identifier indicating the reason for the condition's last transition.
Producers of specific condition types may define expected values and meanings for this field,
and whether the values are considered a guaranteed API.
The value should be a CamelCase string.
This field may not be empty.
                      Max Length:  1024
                      Min Length:  1
                      Pattern:     ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      Type:        string
                    Status:
                      Description:  status of the condition, one of True, False, Unknown.
                      Enum:
                        True
                        False
                        Unknown
                      Type:  string
                    Type:
                      Description:  type of condition in CamelCase or in foo.example.com/CamelCase.
---
Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
useful (see .node.status.conditions), the ability to deconflict is important.
The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      Max Length:  316
                      Pattern:     ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      Type:        string
                  Required:
                    lastTransitionTime
                    message
                    reason
                    status
                    type
                  Type:  object
                Type:    array
            Type:        object
        Type:            object
    Served:              true
    Storage:             true
    Subresources:
      Status:
Status:
  Accepted Names:
    Kind:       Backstage
    List Kind:  BackstageList
    Plural:     backstages
    Singular:   backstage
  Conditions:
    Last Transition Time:  2025-09-11T20:45:11Z
    Message:               no conflicts found
    Reason:                NoConflicts
    Status:                True
    Type:                  NamesAccepted
    Last Transition Time:  2025-09-11T20:45:11Z
    Message:               the initial names have been accepted
    Reason:                InitialNamesAccepted
    Status:                True
    Type:                  Established
  Stored Versions:
    v1alpha3
Events:  <none>
