#!/bin/bash

# RHDH Must-Gather Tool - Main Orchestrator
# Collects diagnostic information for Red Hat Developer Hub troubleshooting
# Supports both OpenShift and standard Kubernetes clusters
# Handles both Helm and Operator deployments

set -euo pipefail

# Source utilities
source "$(dirname "$0")/lib/utils.sh"

# Get script directory for calling other scripts
SCRIPT_DIR="$(get_script_dir)"

# Execute a collection script and handle errors
run_collection_script() {
    local script_name="$1"
    local script_path="$SCRIPT_DIR/$script_name"
    local description="$2"
    
    log_info "Running: $description"
    
    if [[ ! -f "$script_path" ]]; then
        log_error "Collection script not found: $script_path"
        return 1
    fi
    
    if [[ ! -x "$script_path" ]]; then
        log_error "Collection script not executable: $script_path"
        return 1
    fi
    
    log_debug "Executing: $script_path"
    
    if ! "$script_path"; then
        log_error "$description failed"
        return 1
    fi
    
    log_success "$description completed"
    return 0
}

# Create the overall directory structure
setup_base_directories() {
    log_info "Setting up base directory structure..."
    
    ensure_directory "$MUST_GATHER_DIR"
    ensure_directory "$MUST_GATHER_DIR/cluster-info"
    ensure_directory "$MUST_GATHER_DIR/rhdh"
    ensure_directory "$MUST_GATHER_DIR/logs"
    ensure_directory "$MUST_GATHER_DIR/events"
    
    log_success "Base directory structure created"
}

# Run the detection phase
run_detection_phase() {
    log_info "=== DETECTION PHASE ==="
    
    # Cluster type detection
    if ! run_collection_script "detect-cluster" "Cluster type detection"; then
        log_error "Cluster detection failed"
        return 1
    fi
    
    # RHDH deployment detection
    if ! run_collection_script "detect-rhdh" "RHDH deployment detection"; then
        log_warn "RHDH deployment detection completed with warnings (may not be deployed)"
    fi
    
    # Load detection results for use by other scripts
    load_detection_results
    
    log_info "Detection phase completed"
    log_info "Cluster Type: ${CLUSTER_TYPE:-unknown}"
    log_info "RHDH Deployment Type: ${DEPLOYMENT_TYPE:-none}"
    log_info "RHDH Namespace: ${RHDH_NAMESPACE:-none}"
    
    return 0
}

# Run the collection phase
run_collection_phase() {
    log_info "=== COLLECTION PHASE ==="
    
    # Always collect cluster information
    if ! run_collection_script "collect-cluster-info" "Cluster information collection"; then
        log_error "Cluster information collection failed"
        return 1
    fi
    
    # Load detection results
    load_detection_results
    local deployment_type="${DEPLOYMENT_TYPE:-none}"
    local namespace="${RHDH_NAMESPACE:-}"
    
    # Deployment-specific collection
    if [[ "$deployment_type" == "helm" ]]; then
        log_info "Detected Helm deployment, collecting Helm-specific data..."
        if ! run_collection_script "collect-helm-data" "Helm data collection"; then
            log_error "Helm data collection failed"
        fi
    elif [[ "$deployment_type" == "operator" ]]; then
        log_info "Detected Operator deployment, collecting Operator-specific data..."
        if ! run_collection_script "collect-operator-data" "Operator data collection"; then
            log_error "Operator data collection failed"
        fi
    else
        log_warn "No RHDH deployment detected, skipping deployment-specific collection"
    fi
    
    # RHDH resources collection (if namespace is known)
    if [[ -n "$namespace" ]]; then
        if ! run_collection_script "collect-rhdh-resources" "RHDH resources collection"; then
            log_error "RHDH resources collection failed"
        fi
    else
        log_warn "RHDH namespace not detected, skipping RHDH resource collection"
    fi
    
    # Always collect logs and events
    if ! run_collection_script "collect-logs-events" "Logs and events collection"; then
        log_error "Logs and events collection failed"
    fi
    
    log_success "Collection phase completed"
}

# Run sanitization
run_sanitization_phase() {
    log_info "=== SANITIZATION PHASE ==="
    
    local sanitize_script="$SCRIPT_DIR/sanitize"
    
    if [[ -f "$sanitize_script" && -x "$sanitize_script" ]]; then
        log_info "Running data sanitization..."
        if ! "$sanitize_script" "$MUST_GATHER_DIR"; then
            log_warn "Data sanitization completed with warnings"
        else
            log_success "Data sanitization completed"
        fi
    else
        log_warn "Sanitization script not found or not executable: $sanitize_script"
    fi
}

# Generate final collection summary
generate_final_summary() {
    log_info "Generating final collection summary..."
    
    # Load detection results
    load_detection_results
    local cluster_type="${CLUSTER_TYPE:-unknown}"
    local deployment_type="${DEPLOYMENT_TYPE:-none}"
    local namespace="${RHDH_NAMESPACE:-none}"
    
    # Count collected files
    local total_files=$(find "$MUST_GATHER_DIR" -type f 2>/dev/null | wc -l || echo "0")
    local log_files=$(find "$MUST_GATHER_DIR" -name "*.log" -type f 2>/dev/null | wc -l || echo "0")
    local yaml_files=$(find "$MUST_GATHER_DIR" -name "*.yaml" -type f 2>/dev/null | wc -l || echo "0")
    
    cat > "$MUST_GATHER_DIR/collection-summary.txt" << EOF
RHDH Must-Gather Collection Summary
==================================
Collection Date: $(date)
Collection Tool Version: 1.0.0
Must-Gather Directory: $MUST_GATHER_DIR

=== DETECTION RESULTS ===
Cluster Type: $cluster_type
RHDH Deployment Type: $deployment_type
RHDH Namespace: $namespace

=== COLLECTION STATISTICS ===
Total Files Collected: $total_files
Log Files: $log_files
YAML Files: $yaml_files

=== COLLECTED DATA ===
✓ Cluster Information:
  - Basic cluster info and API server details
  - Node information and resource usage
  - Storage classes and persistent volumes
  - Networking configuration and policies
  - RBAC (roles, bindings, service accounts)
  - Resource quotas and limits
  - Cluster-wide events
$([[ "$cluster_type" == "openshift" ]] && echo "  - OpenShift-specific resources (operators, routes, SCCs)")

EOF

    if [[ "$deployment_type" != "none" && -n "$namespace" ]]; then
        cat >> "$MUST_GATHER_DIR/collection-summary.txt" << EOF
✓ RHDH-Specific Data:
  - All resources from namespace: $namespace
  - Pod logs (current and previous)
  - RHDH-specific events
$([[ "$deployment_type" == "helm" ]] && echo "  - Helm charts, values, and manifests" || echo "  - Operator and Custom Resources")
$([[ "$deployment_type" == "operator" ]] && echo "  - CRDs and Backstage Custom Resources")
$([[ "$deployment_type" == "operator" ]] && echo "  - OLM information (CSVs, Subscriptions)")

EOF
    else
        cat >> "$MUST_GATHER_DIR/collection-summary.txt" << EOF
⚠ RHDH-Specific Data:
  - No RHDH deployment detected
  - Only general cluster information collected
  - Manual investigation may be required

EOF
    fi

    cat >> "$MUST_GATHER_DIR/collection-summary.txt" << EOF
=== DATA ORGANIZATION ===
cluster-info/          # Cluster-wide information
logs/                  # Pod and system logs
events/                # Kubernetes events
rhdh/                  # RHDH-specific data
├── resources/         # RHDH namespace resources
$([[ "$deployment_type" == "helm" ]] && echo "├── helm/              # Helm deployment data")
$([[ "$deployment_type" == "operator" ]] && echo "├── operator/          # Operator deployment data")
$([[ "$deployment_type" == "operator" ]] && echo "└── backstage-crs/     # Backstage Custom Resources")

=== SECURITY NOTES ===
- Sensitive data has been automatically sanitized
- Secret data sections have been redacted
- Passwords, tokens, and keys have been masked
- Original files backed up before sanitization

=== COLLECTION STATUS ===
Collection completed successfully at $(date)

For support or analysis of this data, please provide this
entire directory to your support team or engineers.
EOF

    log_success "Final collection summary generated"
}

# Show collection progress
show_progress() {
    log_info "Must-gather collection progress:"
    echo "  1. ✓ Environment validation"
    echo "  2. ✓ Base directory setup"
    echo "  3. → Detection phase"
    echo "  4. → Collection phase"
    echo "  5. → Sanitization phase"
    echo "  6. → Summary generation"
}

# Main collection orchestrator
main() {
    log_info "Starting RHDH must-gather collection..."
    log_info "Output directory: $MUST_GATHER_DIR"
    log_info "Log level: $LOG_LEVEL"
    
    # Log time constraints if present
    log_time_constraints
    
    # Initialize must-gather environment
    if ! init_must_gather; then
        log_error "Failed to initialize must-gather environment"
        exit 1
    fi
    
    # Show progress
    show_progress
    
    # Setup base directories
    setup_base_directories
    
    # Run detection phase
    if ! run_detection_phase; then
        log_error "Detection phase failed"
        exit 1
    fi
    
    # Run collection phase
    if ! run_collection_phase; then
        log_error "Collection phase failed, but continuing..."
    fi
    
    # Run sanitization
    run_sanitization_phase
    
    # Generate final summary
    generate_final_summary
    
    # Cleanup
    cleanup_must_gather
    
    log_success "Must-gather collection completed successfully!"
    log_info "Collection summary: $MUST_GATHER_DIR/collection-summary.txt"
    log_info "Total data collected in: $MUST_GATHER_DIR"
    
    # Show final file count
    local final_file_count=$(find "$MUST_GATHER_DIR" -type f 2>/dev/null | wc -l || echo "0")
    log_info "Files collected: $final_file_count"
}

# Show help
show_help() {
    cat << EOF
RHDH Must-Gather Tool - Main Orchestrator

Usage: $0 [OPTIONS]

This is the main entry point for RHDH must-gather data collection.
It orchestrates the execution of multiple specialized collection scripts.

Options:
  -h, --help    Show this help message

Environment Variables:
  MUST_GATHER_DIR       Output directory (default: /must-gather)
  LOG_LEVEL            Logging level: DEBUG, INFO, WARN, ERROR (default: INFO)
  COLLECTION_TIMEOUT   Timeout for individual commands in seconds (default: 300)

Collection Phases:
  1. Detection Phase:
     - Detect cluster type (OpenShift vs Kubernetes)
     - Detect RHDH deployment type and namespace
  
  2. Collection Phase:
     - Collect cluster-wide information
     - Collect deployment-specific data (Helm or Operator)
     - Collect RHDH resources and logs
     - Collect events and system information
  
  3. Sanitization Phase:
     - Remove or mask sensitive information
     - Redact secrets, tokens, and passwords
  
  4. Summary Generation:
     - Create comprehensive collection summary
     - Document what was collected and where

Examples:
  $0                              # Standard collection
  LOG_LEVEL=DEBUG $0             # Debug mode
  MUST_GATHER_DIR=/tmp/rhdh $0   # Custom output directory

For more information about individual collection scripts, run:
  $0 [script-name] --help

Available collection scripts:
  - detect-cluster: Cluster type detection
  - detect-rhdh: RHDH deployment detection  
  - collect-cluster-info: Cluster information
  - collect-helm-data: Helm deployment data
  - collect-operator-data: Operator deployment data
  - collect-rhdh-resources: RHDH namespace resources
  - collect-logs-events: Logs and events
  - sanitize: Data sanitization
EOF
}

# Handle command line arguments
case "${1:-}" in
    -h|--help)
        show_help
        exit 0
        ;;
    detect-cluster|detect-rhdh|collect-cluster-info|collect-helm-data|collect-operator-data|collect-rhdh-resources|collect-logs-events|sanitize)
        # Allow running individual scripts
        script_name="$1"
        shift
        exec "$SCRIPT_DIR/$script_name" "$@"
        ;;
    *)
        # Default: run full collection
        main "$@"
        ;;
esac