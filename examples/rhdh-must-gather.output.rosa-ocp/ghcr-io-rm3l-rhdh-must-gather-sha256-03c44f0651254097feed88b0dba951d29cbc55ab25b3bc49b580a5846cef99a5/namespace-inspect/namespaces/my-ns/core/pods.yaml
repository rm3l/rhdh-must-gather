---
apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      k8s.ovn.org/pod-networks: '{"default":{"ip_addresses":["10.129.0.41/23"],"mac_address":"0a:58:0a:81:00:29","gateway_ips":["10.129.0.1"],"routes":[{"dest":"10.128.0.0/14","nextHop":"10.129.0.1"},{"dest":"172.30.0.0/16","nextHop":"10.129.0.1"},{"dest":"169.254.0.5/32","nextHop":"10.129.0.1"},{"dest":"100.64.0.0/16","nextHop":"10.129.0.1"}],"ip_address":"10.129.0.41/23","gateway_ip":"10.129.0.1","role":"primary"}}'
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "ovn-kubernetes",
            "interface": "eth0",
            "ips": [
                "10.129.0.41"
            ],
            "mac": "0a:58:0a:81:00:29",
            "default": true,
            "dns": {}
        }]
      openshift.io/scc: restricted-v2
      rhdh.redhat.com/ext-config-hash: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
    creationTimestamp: "2025-10-23T11:12:31Z"
    generateName: backstage-my-developer-hub-op-67d5df4bcc-
    labels:
      pod-template-hash: 67d5df4bcc
      rhdh.redhat.com/app: backstage-my-developer-hub-op
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:rhdh.redhat.com/ext-config-hash: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:pod-template-hash: {}
            f:rhdh.redhat.com/app: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"6551025a-39f0-4067-8351-89f1226971ff"}: {}
        f:spec:
          f:automountServiceAccountToken: {}
          f:containers:
            k:{"name":"backstage-backend"}:
              .: {}
              f:args: {}
              f:env:
                .: {}
                k:{"name":"APP_CONFIG_backend_listen_port"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:envFrom: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":7007,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:drop: {}
                f:readOnlyRootFilesystem: {}
                f:runAsNonRoot: {}
                f:seccompProfile:
                  .: {}
                  f:type: {}
              f:startupProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/opt/app-root/src/default.app-config.yaml"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                  f:subPath: {}
                k:{"mountPath":"/opt/app-root/src/dynamic-plugins-root"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/tmp"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
              f:workingDir: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:initContainers:
            .: {}
            k:{"name":"install-dynamic-plugins"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"MAX_ENTRY_SIZE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"NPM_CONFIG_USERCONFIG"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:drop: {}
                f:readOnlyRootFilesystem: {}
                f:runAsNonRoot: {}
                f:seccompProfile:
                  .: {}
                  f:type: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/dynamic-plugins-root"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/opt/app-root/src/.config/containers"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/opt/app-root/src/.npm/_cacache"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/opt/app-root/src/.npmrc.dynamic-plugins"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/opt/app-root/src/dynamic-plugins.yaml"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                  f:subPath: {}
                k:{"mountPath":"/tmp"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
              f:workingDir: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"backstage-appconfig-my-developer-hub-op"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
                f:optional: {}
              f:name: {}
            k:{"name":"backstage-dynamic-plugins-my-developer-hub-op"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
                f:optional: {}
              f:name: {}
            k:{"name":"backstage-files-my-developer-hub-op"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:optional: {}
                f:secretName: {}
            k:{"name":"dynamic-plugins-registry-auth"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:optional: {}
                f:secretName: {}
            k:{"name":"dynamic-plugins-root"}:
              .: {}
              f:ephemeral:
                .: {}
                f:volumeClaimTemplate:
                  .: {}
                  f:metadata:
                    .: {}
                    f:creationTimestamp: {}
                  f:spec:
                    .: {}
                    f:accessModes: {}
                    f:resources:
                      .: {}
                      f:requests:
                        .: {}
                        f:storage: {}
                    f:volumeMode: {}
              f:name: {}
            k:{"name":"npmcacache"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
            k:{"name":"temp"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2025-10-23T11:12:31Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            .: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
      manager: kube-scheduler
      operation: Update
      subresource: status
      time: "2025-10-23T11:12:31Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.ovn.org/pod-networks: {}
      manager: ip-10-0-1-166
      operation: Update
      subresource: status
      time: "2025-10-23T11:12:35Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.v1.cni.cncf.io/network-status: {}
      manager: multus-daemon
      operation: Update
      subresource: status
      time: "2025-10-23T11:13:41Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodReadyToStartContainers"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:hostIPs: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.129.0.41"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2025-10-23T11:17:55Z"
    name: backstage-my-developer-hub-op-67d5df4bcc-8pmvq
    namespace: my-ns
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: backstage-my-developer-hub-op-67d5df4bcc
      uid: 6551025a-39f0-4067-8351-89f1226971ff
    resourceVersion: "41428"
    uid: 8a27900d-ae27-443f-80d8-d7743418c593
  spec:
    automountServiceAccountToken: false
    containers:
    - args:
      - --config
      - dynamic-plugins-root/app-config.dynamic-plugins.yaml
      - --config
      - /opt/app-root/src/default.app-config.yaml
      env:
      - name: APP_CONFIG_backend_listen_port
        value: "7007"
      envFrom:
      - secretRef:
          name: backstage-psql-secret-my-developer-hub-op
      image: registry.redhat.io/rhdh/rhdh-hub-rhel9@sha256:0c76994fde2cd71471802d458b682ab652be5a0e291c3a2773cb524259ac79b2
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /.backstage/health/v1/liveness
          port: backend
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 4
      name: backstage-backend
      ports:
      - containerPort: 7007
        name: backend
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /.backstage/health/v1/readiness
          port: backend
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 2
        timeoutSeconds: 4
      resources:
        limits:
          cpu: "1"
          ephemeral-storage: 5Gi
          memory: 2560Mi
        requests:
          cpu: 250m
          ephemeral-storage: 5Gi
          memory: 256Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000800000
        seccompProfile:
          type: RuntimeDefault
      startupProbe:
        failureThreshold: 3
        httpGet:
          path: /.backstage/health/v1/liveness
          port: backend
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 4
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /opt/app-root/src/dynamic-plugins-root
        name: dynamic-plugins-root
      - mountPath: /tmp
        name: temp
      - mountPath: /opt/app-root/src/default.app-config.yaml
        name: backstage-appconfig-my-developer-hub-op
        readOnly: true
        subPath: default.app-config.yaml
      workingDir: /opt/app-root/src
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: default-dockercfg-k4hmt
    initContainers:
    - command:
      - ./install-dynamic-plugins.sh
      - /dynamic-plugins-root
      env:
      - name: NPM_CONFIG_USERCONFIG
        value: /opt/app-root/src/.npmrc.dynamic-plugins/.npmrc
      - name: MAX_ENTRY_SIZE
        value: "30000000"
      image: registry.redhat.io/rhdh/rhdh-hub-rhel9@sha256:0c76994fde2cd71471802d458b682ab652be5a0e291c3a2773cb524259ac79b2
      imagePullPolicy: IfNotPresent
      name: install-dynamic-plugins
      resources:
        limits:
          cpu: "1"
          ephemeral-storage: 5Gi
          memory: 2560Mi
        requests:
          cpu: 250m
          ephemeral-storage: 5Gi
          memory: 256Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000800000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /dynamic-plugins-root
        name: dynamic-plugins-root
      - mountPath: /opt/app-root/src/.config/containers
        name: dynamic-plugins-registry-auth
        readOnly: true
      - mountPath: /opt/app-root/src/.npm/_cacache
        name: npmcacache
      - mountPath: /tmp
        name: temp
      - mountPath: /opt/app-root/src/dynamic-plugins.yaml
        name: backstage-dynamic-plugins-my-developer-hub-op
        readOnly: true
        subPath: dynamic-plugins.yaml
      - mountPath: /opt/app-root/src/.npmrc.dynamic-plugins
        name: backstage-files-my-developer-hub-op
      workingDir: /opt/app-root/src
    nodeName: ip-10-0-1-166.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1000800000
      seLinuxOptions:
        level: s0:c28,c22
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    volumes:
    - ephemeral:
        volumeClaimTemplate:
          metadata:
            creationTimestamp: null
          spec:
            accessModes:
            - ReadWriteOnce
            resources:
              requests:
                storage: 2Gi
            volumeMode: Filesystem
      name: dynamic-plugins-root
    - name: dynamic-plugins-registry-auth
      secret:
        defaultMode: 416
        optional: true
        secretName: dynamic-plugins-registry-auth
    - emptyDir: {}
      name: npmcacache
    - emptyDir: {}
      name: temp
    - configMap:
        defaultMode: 420
        name: backstage-appconfig-my-developer-hub-op
        optional: false
      name: backstage-appconfig-my-developer-hub-op
    - configMap:
        defaultMode: 420
        name: backstage-dynamic-plugins-my-developer-hub-op
        optional: false
      name: backstage-dynamic-plugins-my-developer-hub-op
    - name: backstage-files-my-developer-hub-op
      secret:
        defaultMode: 420
        optional: false
        secretName: backstage-files-my-developer-hub-op
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-10-23T11:15:36Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-10-23T11:17:03Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-10-23T11:17:55Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-10-23T11:17:55Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-10-23T11:12:35Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://4c431ceead8dc8d5916eb8f56038aa42bf3808a964f60c789b9805ada9ad1ebc
      image: registry.redhat.io/rhdh/rhdh-hub-rhel9@sha256:0c76994fde2cd71471802d458b682ab652be5a0e291c3a2773cb524259ac79b2
      imageID: registry.redhat.io/rhdh/rhdh-hub-rhel9@sha256:0c76994fde2cd71471802d458b682ab652be5a0e291c3a2773cb524259ac79b2
      lastState: {}
      name: backstage-backend
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-10-23T11:17:03Z"
      volumeMounts:
      - mountPath: /opt/app-root/src/dynamic-plugins-root
        name: dynamic-plugins-root
      - mountPath: /tmp
        name: temp
      - mountPath: /opt/app-root/src/default.app-config.yaml
        name: backstage-appconfig-my-developer-hub-op
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.0.1.166
    hostIPs:
    - ip: 10.0.1.166
    initContainerStatuses:
    - containerID: cri-o://0f42b48b307a7cca76136dc5f8389ddfba0e18464d75e828388b58278631d45c
      image: registry.redhat.io/rhdh/rhdh-hub-rhel9@sha256:0c76994fde2cd71471802d458b682ab652be5a0e291c3a2773cb524259ac79b2
      imageID: registry.redhat.io/rhdh/rhdh-hub-rhel9@sha256:0c76994fde2cd71471802d458b682ab652be5a0e291c3a2773cb524259ac79b2
      lastState: {}
      name: install-dynamic-plugins
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: cri-o://0f42b48b307a7cca76136dc5f8389ddfba0e18464d75e828388b58278631d45c
          exitCode: 0
          finishedAt: "2025-10-23T11:17:02Z"
          reason: Completed
          startedAt: "2025-10-23T11:15:36Z"
      volumeMounts:
      - mountPath: /dynamic-plugins-root
        name: dynamic-plugins-root
      - mountPath: /opt/app-root/src/.config/containers
        name: dynamic-plugins-registry-auth
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /opt/app-root/src/.npm/_cacache
        name: npmcacache
      - mountPath: /tmp
        name: temp
      - mountPath: /opt/app-root/src/dynamic-plugins.yaml
        name: backstage-dynamic-plugins-my-developer-hub-op
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /opt/app-root/src/.npmrc.dynamic-plugins
        name: backstage-files-my-developer-hub-op
    phase: Running
    podIP: 10.129.0.41
    podIPs:
    - ip: 10.129.0.41
    qosClass: Burstable
    startTime: "2025-10-23T11:12:35Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      k8s.ovn.org/pod-networks: '{"default":{"ip_addresses":["10.129.0.40/23"],"mac_address":"0a:58:0a:81:00:28","gateway_ips":["10.129.0.1"],"routes":[{"dest":"10.128.0.0/14","nextHop":"10.129.0.1"},{"dest":"172.30.0.0/16","nextHop":"10.129.0.1"},{"dest":"169.254.0.5/32","nextHop":"10.129.0.1"},{"dest":"100.64.0.0/16","nextHop":"10.129.0.1"}],"ip_address":"10.129.0.40/23","gateway_ip":"10.129.0.1","role":"primary"}}'
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "ovn-kubernetes",
            "interface": "eth0",
            "ips": [
                "10.129.0.40"
            ],
            "mac": "0a:58:0a:81:00:28",
            "default": true,
            "dns": {}
        }]
      openshift.io/scc: restricted-v2
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
    creationTimestamp: "2025-10-23T11:12:31Z"
    generateName: backstage-psql-my-developer-hub-op-
    labels:
      apps.kubernetes.io/pod-index: "0"
      controller-revision-hash: backstage-psql-my-developer-hub-op-7fcc657f45
      rhdh.redhat.com/app: backstage-psql-my-developer-hub-op
      statefulset.kubernetes.io/pod-name: backstage-psql-my-developer-hub-op-0
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:apps.kubernetes.io/pod-index: {}
            f:controller-revision-hash: {}
            f:rhdh.redhat.com/app: {}
            f:statefulset.kubernetes.io/pod-name: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"55360e8e-14bf-4449-bf87-88fc67722102"}: {}
        f:spec:
          f:automountServiceAccountToken: {}
          f:containers:
            k:{"name":"postgresql"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"PGDATA"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"POSTGRESQL_PORT_NUMBER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"POSTGRESQL_VOLUME_DIR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:envFrom: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":5432,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:drop: {}
                f:runAsGroup: {}
                f:runAsNonRoot: {}
                f:seccompProfile:
                  .: {}
                  f:type: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/dev/shm"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/pgsql/data"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostname: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:subdomain: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"data"}:
              .: {}
              f:name: {}
              f:persistentVolumeClaim:
                .: {}
                f:claimName: {}
            k:{"name":"dshm"}:
              .: {}
              f:emptyDir:
                .: {}
                f:medium: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2025-10-23T11:12:31Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.ovn.org/pod-networks: {}
      manager: ip-10-0-1-166
      operation: Update
      subresource: status
      time: "2025-10-23T11:12:34Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.v1.cni.cncf.io/network-status: {}
      manager: multus-daemon
      operation: Update
      subresource: status
      time: "2025-10-23T11:12:37Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodReadyToStartContainers"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:hostIPs: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.129.0.40"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2025-10-23T11:14:09Z"
    name: backstage-psql-my-developer-hub-op-0
    namespace: my-ns
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: backstage-psql-my-developer-hub-op
      uid: 55360e8e-14bf-4449-bf87-88fc67722102
    resourceVersion: "40834"
    uid: f789d068-ad7d-41c5-995c-a5cdbf9f7406
  spec:
    automountServiceAccountToken: false
    containers:
    - env:
      - name: POSTGRESQL_PORT_NUMBER
        value: "5432"
      - name: POSTGRESQL_VOLUME_DIR
        value: /var/lib/pgsql/data
      - name: PGDATA
        value: /var/lib/pgsql/data/userdata
      envFrom:
      - secretRef:
          name: backstage-psql-secret-my-developer-hub-op
      image: registry.redhat.io/rhel9/postgresql-15@sha256:b8266c990ed58a483f7dc57406525d0910b694d65e6a7d00924231fe3d8f039e
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /bin/sh
          - -c
          - exec pg_isready -U ${POSTGRES_USER} -h 127.0.0.1 -p 5432
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: postgresql
      ports:
      - containerPort: 5432
        name: tcp-postgresql
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /bin/sh
          - -c
          - -e
          - |
            exec pg_isready -U ${POSTGRES_USER} -h 127.0.0.1 -p 5432
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        limits:
          cpu: 250m
          ephemeral-storage: 20Mi
          memory: 1Gi
        requests:
          cpu: 250m
          ephemeral-storage: 20Mi
          memory: 256Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 1000800000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /dev/shm
        name: dshm
      - mountPath: /var/lib/pgsql/data
        name: data
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: backstage-psql-my-developer-hub-op-0
    imagePullSecrets:
    - name: default-dockercfg-k4hmt
    nodeName: ip-10-0-1-166.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1000800000
      seLinuxOptions:
        level: s0:c28,c22
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: default
    serviceAccountName: default
    subdomain: backstage-psql-my-developer-hub-op
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    volumes:
    - name: data
      persistentVolumeClaim:
        claimName: data-backstage-psql-my-developer-hub-op-0
    - emptyDir:
        medium: Memory
      name: dshm
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-10-23T11:13:58Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-10-23T11:12:34Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-10-23T11:14:09Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-10-23T11:14:09Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-10-23T11:12:34Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://475b1dfae661c97c66357234b4532d629d28c2aa3a83ee9593b049b6faf9b74b
      image: registry.redhat.io/rhel9/postgresql-15@sha256:b8266c990ed58a483f7dc57406525d0910b694d65e6a7d00924231fe3d8f039e
      imageID: registry.redhat.io/rhel9/postgresql-15@sha256:0d5db57d495484a4516aab577c1144b139b8b98847500c55e67e35652ca744d0
      lastState: {}
      name: postgresql
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-10-23T11:13:57Z"
      volumeMounts:
      - mountPath: /dev/shm
        name: dshm
      - mountPath: /var/lib/pgsql/data
        name: data
    hostIP: 10.0.1.166
    hostIPs:
    - ip: 10.0.1.166
    phase: Running
    podIP: 10.129.0.40
    podIPs:
    - ip: 10.129.0.40
    qosClass: Burstable
    startTime: "2025-10-23T11:12:34Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      checksum/app-config: 008f6f5145cbfd5a4b66c2f9ba302b675cc1204617e067623e3c73e543278882
      checksum/dynamic-plugins: f1f9a92f14a31362d7eb30e67ac1458faf1c685765610f93a8967194d8bc1a5f
      k8s.ovn.org/pod-networks: '{"default":{"ip_addresses":["10.128.0.62/23"],"mac_address":"0a:58:0a:80:00:3e","gateway_ips":["10.128.0.1"],"routes":[{"dest":"10.128.0.0/14","nextHop":"10.128.0.1"},{"dest":"172.30.0.0/16","nextHop":"10.128.0.1"},{"dest":"169.254.0.5/32","nextHop":"10.128.0.1"},{"dest":"100.64.0.0/16","nextHop":"10.128.0.1"}],"ip_address":"10.128.0.62/23","gateway_ip":"10.128.0.1","role":"primary"}}'
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "ovn-kubernetes",
            "interface": "eth0",
            "ips": [
                "10.128.0.62"
            ],
            "mac": "0a:58:0a:80:00:3e",
            "default": true,
            "dns": {}
        }]
      openshift.io/scc: restricted-v2
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
    creationTimestamp: "2025-10-23T11:11:18Z"
    generateName: redhat-developer-hub-helm-6698c6d684-
    labels:
      app.kubernetes.io/component: backstage
      app.kubernetes.io/instance: redhat-developer-hub-helm
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: developer-hub
      helm.sh/chart: upstream-2.6.0
      pod-template-hash: 6698c6d684
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:checksum/app-config: {}
            f:checksum/dynamic-plugins: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:helm.sh/chart: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a5126190-8382-4e2f-a7d4-637f70d350dc"}: {}
        f:spec:
          f:containers:
            k:{"name":"backstage-backend"}:
              .: {}
              f:args: {}
              f:env:
                .: {}
                k:{"name":"APP_CONFIG_backend_listen_port"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"BACKEND_SECRET"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef: {}
                k:{"name":"POSTGRES_HOST"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"POSTGRES_PASSWORD"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef: {}
                k:{"name":"POSTGRES_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"POSTGRES_USER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"POSTGRESQL_ADMIN_PASSWORD"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":7007,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:drop: {}
                f:readOnlyRootFilesystem: {}
                f:runAsNonRoot: {}
                f:seccompProfile:
                  .: {}
                  f:type: {}
              f:startupProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/opt/app-root/src/app-config-from-configmap.yaml"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:subPath: {}
                k:{"mountPath":"/opt/app-root/src/dynamic-plugins-root"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/tmp"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:initContainers:
            .: {}
            k:{"name":"install-dynamic-plugins"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"MAX_ENTRY_SIZE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"NPM_CONFIG_USERCONFIG"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:drop: {}
                f:readOnlyRootFilesystem: {}
                f:runAsNonRoot: {}
                f:seccompProfile:
                  .: {}
                  f:type: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/dynamic-plugins-root"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/opt/app-root/src/.config/containers"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/opt/app-root/src/.npm/_cacache"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/opt/app-root/src/.npmrc.dynamic-plugins"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                  f:subPath: {}
                k:{"mountPath":"/opt/app-root/src/dynamic-plugins.yaml"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                  f:subPath: {}
                k:{"mountPath":"/tmp"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
              f:workingDir: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"backstage-app-config"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"dynamic-plugins"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
                f:optional: {}
              f:name: {}
            k:{"name":"dynamic-plugins-npmrc"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:optional: {}
                f:secretName: {}
            k:{"name":"dynamic-plugins-registry-auth"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:optional: {}
                f:secretName: {}
            k:{"name":"dynamic-plugins-root"}:
              .: {}
              f:ephemeral:
                .: {}
                f:volumeClaimTemplate:
                  .: {}
                  f:metadata:
                    .: {}
                    f:creationTimestamp: {}
                  f:spec:
                    .: {}
                    f:accessModes: {}
                    f:resources:
                      .: {}
                      f:requests:
                        .: {}
                        f:storage: {}
                    f:volumeMode: {}
              f:name: {}
            k:{"name":"npmcacache"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
            k:{"name":"temp"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2025-10-23T11:11:18Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            .: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
      manager: kube-scheduler
      operation: Update
      subresource: status
      time: "2025-10-23T11:11:18Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.ovn.org/pod-networks: {}
      manager: ip-10-0-1-102
      operation: Update
      subresource: status
      time: "2025-10-23T11:11:23Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.v1.cni.cncf.io/network-status: {}
      manager: multus-daemon
      operation: Update
      subresource: status
      time: "2025-10-23T11:11:27Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodReadyToStartContainers"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:hostIPs: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.128.0.62"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2025-10-23T11:16:17Z"
    name: redhat-developer-hub-helm-6698c6d684-ccdhj
    namespace: my-ns
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: redhat-developer-hub-helm-6698c6d684
      uid: a5126190-8382-4e2f-a7d4-637f70d350dc
    resourceVersion: "41188"
    uid: b1308212-07da-460c-b72c-f8f1aa182e57
  spec:
    containers:
    - args:
      - --config
      - dynamic-plugins-root/app-config.dynamic-plugins.yaml
      - --config
      - /opt/app-root/src/app-config-from-configmap.yaml
      env:
      - name: APP_CONFIG_backend_listen_port
        value: "7007"
      - name: POSTGRES_HOST
        value: redhat-developer-hub-helm-postgresql
      - name: POSTGRES_PORT
        value: "5432"
      - name: POSTGRES_USER
        value: bn_backstage
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            key: password
            name: redhat-developer-hub-helm-postgresql
      - name: BACKEND_SECRET
        valueFrom:
          secretKeyRef:
            key: backend-secret
            name: redhat-developer-hub-helm-auth
      - name: POSTGRESQL_ADMIN_PASSWORD
        valueFrom:
          secretKeyRef:
            key: postgres-password
            name: redhat-developer-hub-helm-postgresql
      image: registry.redhat.io/rhdh/rhdh-hub-rhel9@sha256:62f32e50727c5006766a34daa5b6472b649cd9894f3fe9543b8ecc67e6760e8e
      imagePullPolicy: Always
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /.backstage/health/v1/liveness
          port: backend
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 4
      name: backstage-backend
      ports:
      - containerPort: 7007
        name: backend
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /.backstage/health/v1/readiness
          port: backend
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 2
        timeoutSeconds: 4
      resources:
        limits:
          cpu: "1"
          ephemeral-storage: 5Gi
          memory: 2560Mi
        requests:
          cpu: 250m
          ephemeral-storage: 5Gi
          memory: 1Gi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000800000
        seccompProfile:
          type: RuntimeDefault
      startupProbe:
        failureThreshold: 3
        httpGet:
          path: /.backstage/health/v1/liveness
          port: backend
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 4
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /opt/app-root/src/app-config-from-configmap.yaml
        name: backstage-app-config
        subPath: app-config.yaml
      - mountPath: /opt/app-root/src/dynamic-plugins-root
        name: dynamic-plugins-root
      - mountPath: /tmp
        name: temp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-zjtzs
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: default-dockercfg-k4hmt
    initContainers:
    - command:
      - ./install-dynamic-plugins.sh
      - /dynamic-plugins-root
      env:
      - name: NPM_CONFIG_USERCONFIG
        value: /opt/app-root/src/.npmrc.dynamic-plugins
      - name: MAX_ENTRY_SIZE
        value: "30000000"
      image: registry.redhat.io/rhdh/rhdh-hub-rhel9@sha256:62f32e50727c5006766a34daa5b6472b649cd9894f3fe9543b8ecc67e6760e8e
      imagePullPolicy: Always
      name: install-dynamic-plugins
      resources:
        limits:
          cpu: "1"
          ephemeral-storage: 5Gi
          memory: 2560Mi
        requests:
          cpu: 250m
          ephemeral-storage: 5Gi
          memory: 256Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000800000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /dynamic-plugins-root
        name: dynamic-plugins-root
      - mountPath: /opt/app-root/src/dynamic-plugins.yaml
        name: dynamic-plugins
        readOnly: true
        subPath: dynamic-plugins.yaml
      - mountPath: /opt/app-root/src/.npmrc.dynamic-plugins
        name: dynamic-plugins-npmrc
        readOnly: true
        subPath: .npmrc
      - mountPath: /opt/app-root/src/.config/containers
        name: dynamic-plugins-registry-auth
        readOnly: true
      - mountPath: /opt/app-root/src/.npm/_cacache
        name: npmcacache
      - mountPath: /tmp
        name: temp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-zjtzs
        readOnly: true
      workingDir: /opt/app-root/src
    nodeName: ip-10-0-1-102.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1000800000
      seLinuxOptions:
        level: s0:c28,c22
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    volumes:
    - ephemeral:
        volumeClaimTemplate:
          metadata:
            creationTimestamp: null
          spec:
            accessModes:
            - ReadWriteOnce
            resources:
              requests:
                storage: 5Gi
            volumeMode: Filesystem
      name: dynamic-plugins-root
    - configMap:
        defaultMode: 420
        name: redhat-developer-hub-helm-dynamic-plugins
        optional: true
      name: dynamic-plugins
    - name: dynamic-plugins-npmrc
      secret:
        defaultMode: 420
        optional: true
        secretName: redhat-developer-hub-helm-dynamic-plugins-npmrc
    - name: dynamic-plugins-registry-auth
      secret:
        defaultMode: 416
        optional: true
        secretName: redhat-developer-hub-helm-dynamic-plugins-registry-auth
    - emptyDir: {}
      name: npmcacache
    - emptyDir: {}
      name: temp
    - configMap:
        defaultMode: 420
        name: redhat-developer-hub-helm-app-config
      name: backstage-app-config
    - name: kube-api-access-zjtzs
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
        - configMap:
            items:
            - key: service-ca.crt
              path: service-ca.crt
            name: openshift-service-ca.crt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-10-23T11:13:56Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-10-23T11:15:18Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-10-23T11:16:17Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-10-23T11:16:17Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-10-23T11:11:23Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://6e8bb51e34af869941f2ef39710b9fd07b7858393df023ac64e546e22c034535
      image: registry.redhat.io/rhdh/rhdh-hub-rhel9@sha256:62f32e50727c5006766a34daa5b6472b649cd9894f3fe9543b8ecc67e6760e8e
      imageID: registry.redhat.io/rhdh/rhdh-hub-rhel9@sha256:34534577a381685582d880b753a44b243fdd09697c878d5fbee790f55dba3d7a
      lastState: {}
      name: backstage-backend
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-10-23T11:15:19Z"
      volumeMounts:
      - mountPath: /opt/app-root/src/app-config-from-configmap.yaml
        name: backstage-app-config
      - mountPath: /opt/app-root/src/dynamic-plugins-root
        name: dynamic-plugins-root
      - mountPath: /tmp
        name: temp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-zjtzs
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.0.1.102
    hostIPs:
    - ip: 10.0.1.102
    initContainerStatuses:
    - containerID: cri-o://d1679c3473f83ce1ead5689dbda1a0b25d3b06f51f1b939668a13d91bcd6d080
      image: registry.redhat.io/rhdh/rhdh-hub-rhel9@sha256:62f32e50727c5006766a34daa5b6472b649cd9894f3fe9543b8ecc67e6760e8e
      imageID: registry.redhat.io/rhdh/rhdh-hub-rhel9@sha256:34534577a381685582d880b753a44b243fdd09697c878d5fbee790f55dba3d7a
      lastState: {}
      name: install-dynamic-plugins
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: cri-o://d1679c3473f83ce1ead5689dbda1a0b25d3b06f51f1b939668a13d91bcd6d080
          exitCode: 0
          finishedAt: "2025-10-23T11:15:17Z"
          reason: Completed
          startedAt: "2025-10-23T11:13:55Z"
      volumeMounts:
      - mountPath: /dynamic-plugins-root
        name: dynamic-plugins-root
      - mountPath: /opt/app-root/src/dynamic-plugins.yaml
        name: dynamic-plugins
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /opt/app-root/src/.npmrc.dynamic-plugins
        name: dynamic-plugins-npmrc
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /opt/app-root/src/.config/containers
        name: dynamic-plugins-registry-auth
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /opt/app-root/src/.npm/_cacache
        name: npmcacache
      - mountPath: /tmp
        name: temp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-zjtzs
        readOnly: true
        recursiveReadOnly: Disabled
    phase: Running
    podIP: 10.128.0.62
    podIPs:
    - ip: 10.128.0.62
    qosClass: Burstable
    startTime: "2025-10-23T11:11:23Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      k8s.ovn.org/pod-networks: '{"default":{"ip_addresses":["10.129.0.39/23"],"mac_address":"0a:58:0a:81:00:27","gateway_ips":["10.129.0.1"],"routes":[{"dest":"10.128.0.0/14","nextHop":"10.129.0.1"},{"dest":"172.30.0.0/16","nextHop":"10.129.0.1"},{"dest":"169.254.0.5/32","nextHop":"10.129.0.1"},{"dest":"100.64.0.0/16","nextHop":"10.129.0.1"}],"ip_address":"10.129.0.39/23","gateway_ip":"10.129.0.1","role":"primary"}}'
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "ovn-kubernetes",
            "interface": "eth0",
            "ips": [
                "10.129.0.39"
            ],
            "mac": "0a:58:0a:81:00:27",
            "default": true,
            "dns": {}
        }]
      openshift.io/scc: restricted-v2
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
    creationTimestamp: "2025-10-23T11:11:18Z"
    generateName: redhat-developer-hub-helm-postgresql-
    labels:
      app.kubernetes.io/component: primary
      app.kubernetes.io/instance: redhat-developer-hub-helm
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/version: 15.4.0
      apps.kubernetes.io/pod-index: "0"
      controller-revision-hash: redhat-developer-hub-helm-postgresql-78c65856c
      helm.sh/chart: postgresql-12.10.0
      statefulset.kubernetes.io/pod-name: redhat-developer-hub-helm-postgresql-0
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/version: {}
            f:apps.kubernetes.io/pod-index: {}
            f:controller-revision-hash: {}
            f:helm.sh/chart: {}
            f:statefulset.kubernetes.io/pod-name: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"f59c3ace-a5c2-4eef-bc9b-21e8a73f9a74"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:podAntiAffinity:
              .: {}
              f:preferredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"postgresql"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"BITNAMI_DEBUG"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"PGDATA"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"POSTGRES_PASSWORD"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef: {}
                k:{"name":"POSTGRES_POSTGRES_PASSWORD"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef: {}
                k:{"name":"POSTGRES_USER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"POSTGRESQL_ADMIN_PASSWORD"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef: {}
                k:{"name":"POSTGRESQL_CLIENT_MIN_MESSAGES"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"POSTGRESQL_ENABLE_LDAP"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"POSTGRESQL_ENABLE_TLS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"POSTGRESQL_LOG_CONNECTIONS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"POSTGRESQL_LOG_DISCONNECTIONS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"POSTGRESQL_LOG_HOSTNAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"POSTGRESQL_PGAUDIT_LOG_CATALOG"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"POSTGRESQL_PORT_NUMBER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"POSTGRESQL_SHARED_PRELOAD_LIBRARIES"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"POSTGRESQL_VOLUME_DIR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":5432,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/dev/shm"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/pgsql/data"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostname: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:subdomain: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"data"}:
              .: {}
              f:name: {}
              f:persistentVolumeClaim:
                .: {}
                f:claimName: {}
            k:{"name":"dshm"}:
              .: {}
              f:emptyDir:
                .: {}
                f:medium: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2025-10-23T11:11:18Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.ovn.org/pod-networks: {}
      manager: ip-10-0-1-166
      operation: Update
      subresource: status
      time: "2025-10-23T11:11:21Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.v1.cni.cncf.io/network-status: {}
      manager: multus-daemon
      operation: Update
      subresource: status
      time: "2025-10-23T11:11:25Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodReadyToStartContainers"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:hostIPs: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.129.0.39"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2025-10-23T11:11:36Z"
    name: redhat-developer-hub-helm-postgresql-0
    namespace: my-ns
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: redhat-developer-hub-helm-postgresql
      uid: f59c3ace-a5c2-4eef-bc9b-21e8a73f9a74
    resourceVersion: "40352"
    uid: 18871bd7-ddab-42ea-887f-c0a4e13dde95
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/component: primary
                app.kubernetes.io/instance: redhat-developer-hub-helm
                app.kubernetes.io/name: postgresql
            topologyKey: kubernetes.io/hostname
          weight: 1
    containers:
    - env:
      - name: BITNAMI_DEBUG
        value: "false"
      - name: POSTGRESQL_PORT_NUMBER
        value: "5432"
      - name: POSTGRESQL_VOLUME_DIR
        value: /var/lib/pgsql/data
      - name: PGDATA
        value: /var/lib/pgsql/data/userdata
      - name: POSTGRES_USER
        value: bn_backstage
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            key: password
            name: redhat-developer-hub-helm-postgresql
      - name: POSTGRES_POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            key: postgres-password
            name: redhat-developer-hub-helm-postgresql
      - name: POSTGRESQL_ENABLE_LDAP
        value: "no"
      - name: POSTGRESQL_ENABLE_TLS
        value: "no"
      - name: POSTGRESQL_LOG_HOSTNAME
        value: "false"
      - name: POSTGRESQL_LOG_CONNECTIONS
        value: "false"
      - name: POSTGRESQL_LOG_DISCONNECTIONS
        value: "false"
      - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
        value: "off"
      - name: POSTGRESQL_CLIENT_MIN_MESSAGES
        value: error
      - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
        value: pgaudit
      - name: POSTGRESQL_ADMIN_PASSWORD
        valueFrom:
          secretKeyRef:
            key: postgres-password
            name: redhat-developer-hub-helm-postgresql
      image: registry.redhat.io/rhel9/postgresql-15@sha256:4d707fc04f13c271b455f7b56c1fda9e232a62214ffc6213c02e41177dd4a13f
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /bin/sh
          - -c
          - exec pg_isready -U "bn_backstage" -h 127.0.0.1 -p 5432
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: postgresql
      ports:
      - containerPort: 5432
        name: tcp-postgresql
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /bin/sh
          - -c
          - -e
          - |
            exec pg_isready -U "bn_backstage" -h 127.0.0.1 -p 5432
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        limits:
          cpu: 250m
          ephemeral-storage: 20Mi
          memory: 1Gi
        requests:
          cpu: 250m
          ephemeral-storage: 20Mi
          memory: 256Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        runAsNonRoot: true
        runAsUser: 1000800000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /dev/shm
        name: dshm
      - mountPath: /var/lib/pgsql/data
        name: data
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-mcrsr
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: redhat-developer-hub-helm-postgresql-0
    imagePullSecrets:
    - name: default-dockercfg-k4hmt
    nodeName: ip-10-0-1-166.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1000800000
      seLinuxOptions:
        level: s0:c28,c22
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: default
    serviceAccountName: default
    subdomain: redhat-developer-hub-helm-postgresql-hl
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    volumes:
    - name: data
      persistentVolumeClaim:
        claimName: data-redhat-developer-hub-helm-postgresql-0
    - emptyDir:
        medium: Memory
      name: dshm
    - name: kube-api-access-mcrsr
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
        - configMap:
            items:
            - key: service-ca.crt
              path: service-ca.crt
            name: openshift-service-ca.crt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-10-23T11:11:25Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-10-23T11:11:21Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-10-23T11:11:36Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-10-23T11:11:36Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-10-23T11:11:21Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://08beae4857b679fced240c96669311aac3396600ddc14b7e3559409d18c4a550
      image: registry.redhat.io/rhel9/postgresql-15@sha256:4d707fc04f13c271b455f7b56c1fda9e232a62214ffc6213c02e41177dd4a13f
      imageID: registry.redhat.io/rhel9/postgresql-15@sha256:4d707fc04f13c271b455f7b56c1fda9e232a62214ffc6213c02e41177dd4a13f
      lastState: {}
      name: postgresql
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-10-23T11:11:25Z"
      volumeMounts:
      - mountPath: /dev/shm
        name: dshm
      - mountPath: /var/lib/pgsql/data
        name: data
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-mcrsr
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.0.1.166
    hostIPs:
    - ip: 10.0.1.166
    phase: Running
    podIP: 10.129.0.39
    podIPs:
    - ip: 10.129.0.39
    qosClass: Burstable
    startTime: "2025-10-23T11:11:21Z"
kind: PodList
metadata:
  resourceVersion: "42035"
