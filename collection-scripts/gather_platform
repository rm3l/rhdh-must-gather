#!/usr/bin/env bash

# Platform Data Collection Script
# Collects information about the platform

set -euo pipefail

# Get script directory for calling other scripts
DIR_NAME=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
source "${DIR_NAME}/common.sh"
export_log_collection_args

log_info "Starting Platform data collection..."

OUT_DIR="$BASE_COLLECTION_PATH/rhdh/platform"
ensure_directory "$OUT_DIR"

# --- Helpers ---
jsonpath() {
  kubectl get "$1" $2 -o "jsonpath=$3" 2>/dev/null || true
}

has_api_group() {
  kubectl api-versions 2>/dev/null | grep -q -E "^$1/"
}

provider_prefix() {
  kubectl get nodes -o jsonpath='{.items[0].spec.providerID}' 2>/dev/null | cut -d: -f1
}

get_k8s_version() {
  kubectl version -o json 2>/dev/null | jq -r '.serverVersion.gitVersion' || true
}

# --- Init ---
PLATFORM=""
UNDERLYING=""
OCP_VERSION=""
K8S_VERSION=""

# OCP/OKD
if has_api_group "config.openshift.io"; then
  PLATFORM="OCP"

  OCP_VERSION="$(jsonpath clusterversion version '{.status.desired.version}')"
  [[ -z "${OCP_VERSION}" ]] && OCP_VERSION="$(kubectl get clusterversion version -o json | jq -r '.status.desired.version' 2>/dev/null || true)"

  K8S_VERSION="$(jsonpath clusterversion version '{.status.desired.kubernetesVersion}')"
  [[ -z "${K8S_VERSION}" ]] && K8S_VERSION="$(get_k8s_version)"

  UNDERLYING="$(jsonpath infrastructures.config.openshift.io cluster '{.status.platformStatus.type}')"
  [[ -z "${UNDERLYING}" ]] && UNDERLYING="$(jsonpath infrastructures.config.openshift.io cluster '{.status.platform}')"

  INFRA_JSON="$(kubectl get infrastructures.config.openshift.io cluster -o json 2>/dev/null || true)"

  # ROSA / ARO / ROKS
  if [[ "$UNDERLYING" == "AWS" ]]; then
    if echo "$INFRA_JSON" | grep -qi "rosa.openshift.io"; then
      PLATFORM="ROSA"
    fi
  elif [[ "$UNDERLYING" == "Azure" ]]; then
    if echo "$INFRA_JSON" | grep -qi "aro.openshift.io"; then
      PLATFORM="ARO"
    fi
  elif [[ "$UNDERLYING" == "IBMCloud" ]]; then
    PLATFORM="ROKS"
  fi

else
  K8S_VERSION="$(get_k8s_version)"

  case "$(provider_prefix)" in
    aws)    UNDERLYING="AWS" ;;
    gce)    UNDERLYING="GCP" ;;
    azure)  UNDERLYING="Azure" ;;
    ibm)    UNDERLYING="IBMCloud" ;;
    vsphere)UNDERLYING="vSphere" ;;
    *)      UNDERLYING="" ;;
  esac

  if [[ "$UNDERLYING" == "AWS" ]] && kubectl get nodes -o jsonpath='{.items[*].metadata.labels.eks\.amazonaws\.com/nodegroup}' | grep -q .; then
    PLATFORM="EKS"
  elif [[ "$UNDERLYING" == "GCP" ]] && kubectl get nodes -o jsonpath='{.items[*].metadata.labels.cloud\.google\.com/gke-nodepool}' | grep -q .; then
    PLATFORM="GKE"
  elif [[ "$UNDERLYING" == "Azure" ]] && kubectl get nodes -o jsonpath='{.items[*].metadata.labels.agentpool}' | grep -q .; then
    PLATFORM="AKS"
  else
    PLATFORM="Vanilla K8s"
  fi
fi

jq -n \
  --arg platform "$PLATFORM" \
  --arg underlying "$UNDERLYING" \
  --arg ocp_version "$OCP_VERSION" \
  --arg k8s_version "$K8S_VERSION" \
  '{
    platform: $platform,
    underlying: $underlying,
    ocpVersion: $ocp_version,
    k8sVersion: $k8s_version
  }' > "${OUT_DIR}/platform.json"

{
  echo "Detected Platform Information"
  echo "-----------------------------"
  echo "Platform   : ${PLATFORM}"
  echo "Underlying : ${UNDERLYING}"
  [[ -n "${OCP_VERSION}" ]] && echo "OCP Version: ${OCP_VERSION}"
  [[ -n "${K8S_VERSION}" ]] && echo "K8s Version: ${K8S_VERSION}"
} > "${OUT_DIR}/platform.txt"

log_info "Detected ${PLATFORM} on ${UNDERLYING}${OCP_VERSION:+ (OCP ${OCP_VERSION})}${K8S_VERSION:+, K8s ${K8S_VERSION}}"

log_success "Platform data collection completed."
