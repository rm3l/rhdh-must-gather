#!/usr/bin/env bash

# Operator Data Collection Script
# Collects Operator-specific information for RHDH deployments

set -euo pipefail

# Get script directory for calling other scripts
DIR_NAME=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
source "${DIR_NAME}/common.sh"
export_log_collection_args

log_info "Starting Operator data collection..."

operator_dir="$BASE_COLLECTION_PATH/operator"
ensure_directory "$operator_dir"

function gather_olm_information() {
    log_info "Collecting OLM (Operator Lifecycle Manager) information..."

    local olm_dir="$operator_dir/olm"
    ensure_directory "$olm_dir"

    namespace_args=$(get_namespace_args)
    
    # ClusterServiceVersions
    if [[ -n "${RHDH_TARGET_NAMESPACES:-}" ]]; then
        safe_exec "kubectl get csv $namespace_args | grep -E '(rhdh|backstage|developer-hub)'" "$olm_dir/rhdh-csv-all.txt" "RHDH CSVs in specified namespaces" || echo "No RHDH CSVs found" > "$olm_dir/rhdh-csv-all.txt"
        safe_exec "kubectl get subscription $namespace_args | grep -E '(rhdh|backstage|developer-hub)'" "$olm_dir/rhdh-subscriptions-all.txt" "RHDH subscriptions in specified namespaces" || echo "No RHDH subscriptions found" > "$olm_dir/rhdh-subscriptions-all.txt"
        safe_exec "kubectl get installplan $namespace_args" "$olm_dir/installplans-all.txt" "InstallPlans in specified namespaces"
        safe_exec "kubectl get operatorgroup $namespace_args" "$olm_dir/operatorgroups-all.txt" "OperatorGroups in specified namespaces"
        safe_exec "kubectl get catalogsource $namespace_args" "$olm_dir/catalogsources-all.txt" "CatalogSources in specified namespaces"
    else
        safe_exec "kubectl get csv --all-namespaces | grep -E '(rhdh|backstage|developer-hub)'" "$olm_dir/rhdh-csv-all.txt" "RHDH CSVs in all namespaces" || echo "No RHDH CSVs found" > "$olm_dir/rhdh-csv-all.txt"
        safe_exec "kubectl get subscription --all-namespaces | grep -E '(rhdh|backstage|developer-hub)'" "$olm_dir/rhdh-subscriptions-all.txt" "RHDH subscriptions in all namespaces" || echo "No RHDH subscriptions found" > "$olm_dir/rhdh-subscriptions-all.txt"
        safe_exec "kubectl get installplan --all-namespaces" "$olm_dir/installplans-all.txt" "InstallPlans in all namespaces"
        safe_exec "kubectl get operatorgroup --all-namespaces" "$olm_dir/operatorgroups-all.txt" "OperatorGroups in all namespaces"
        safe_exec "kubectl get catalogsource --all-namespaces" "$olm_dir/catalogsources-all.txt" "CatalogSources in all namespaces"
    fi
}

function gather_crds() {
  log_info "\tCollecting RHDH-related Custom Resource Definitions..."

  local crds_dir="$operator_dir/crds"
  ensure_directory "$crds_dir"

  # RHDH/Backstage CRDs
  safe_exec "kubectl get crd" "$crds_dir/all-crds.txt" "All CRDs in cluster"

  # Specific RHDH CRDs
  local rhdh_crds=(
      "backstages.rhdh.redhat.com"
  )

  for crd in "${rhdh_crds[@]}"; do
      if kubectl get crd "$crd" >/dev/null 2>&1; then
          safe_exec "kubectl get crd '$crd' -o yaml" "$crds_dir/${crd}.yaml" "CRD definition for $crd"
          safe_exec "kubectl describe crd '$crd'" "$crds_dir/${crd}.describe.txt" "CRD description for $crd"
      else
          echo "CRD $crd not found" > "$crds_dir/${crd}--not-found.txt"
      fi
  done
}

function gather_operator_config() {
  local dir=$1
  local ns=$2
  log_info "\tCollecting all Operator config ConfigMaps in $ns..."

  local configs_dir="$dir/configs"
  ensure_directory "$configs_dir"

  safe_exec "kubectl get configmap -n $ns" "$configs_dir/all-configmaps.txt" "All ConfigMaps in $ns"

  local rhdh_cms=(
      "rhdh-default-config"
      "rhdh-plugin-deps"
  )

  for cm in "${rhdh_cms[@]}"; do
        if kubectl -n "$ns" get configmap "$cm" >/dev/null 2>&1; then
            safe_exec "kubectl -n $ns get configmap '$cm' -o yaml" "$configs_dir/${cm}.yaml" "CM definition for $cm"
            safe_exec "kubectl -n $ns describe configmap '$cm'" "$configs_dir/${cm}.describe.txt" "CM description for $cm"
        else
            echo "CM $cm not found" > "$configs_dir/${cm}--not-found.txt"
        fi
  done
}

function gather_deployments() {
  local dir=$1
  local ns=$2
  log_info "\tCollecting Operator Deployments in $ns..."

  local deployments_dir="$dir/deployments"
  ensure_directory "$deployments_dir"

  safe_exec "kubectl get deployments -n $ns" "$deployments_dir/all-deployments.txt" "All Deployments in $ns"

  safe_exec "kubectl get deployments -n $ns -l app=rhdh-operator -o yaml" "$deployments_dir/app=rhdh-operator.yaml" \
    "Deployments with label app=rhdh-operator $ns"

  safe_exec "kubectl describe deployments -n $ns -l app=rhdh-operator" "$deployments_dir/app=rhdh-operator.describe.txt" \
    "Deployment description with label app=rhdh-operator in $ns"
}

function gather_operator_logs() {
  local dir=$1
  local ns=$2
  log_info "\tCollecting Operator Logs in $ns..."

  safe_exec "kubectl -n $ns logs -l app=rhdh-operator --all-containers ${log_collection_args:-}" "$dir/logs.txt" \
    "Logs of pods with label app=rhdh-operator in $ns"
}

function gather_backstage_crs() {
  log_info "Searching for Backstage Custom Resources (CRs) in all or target namespaces..."

  crs_dir="$operator_dir/backstage-crs"
  ensure_directory "$crs_dir"

  namespace_args=$(get_namespace_args)
  kubectl get backstages.rhdh.redhat.com $namespace_args > "$crs_dir/all-backstage-crs.txt"
  kubectl get backstages.rhdh.redhat.com $namespace_args -o json | jq -r '.items[]' > "$crs_dir/all-backstage-crs.json"

  crs=$(jq -r '"\(.metadata.namespace)/\(.metadata.name)"' < "$crs_dir/all-backstage-crs.json" || echo "")
  cr_namespaces=$(jq -r '"\(.metadata.namespace)"' < "$crs_dir/all-backstage-crs.json" || echo "")
  cr_namespaces=$(echo "$cr_namespaces" | sort | uniq)
  rm -rf "$crs_dir/all-backstage-crs.json"

  if [[ -z "$crs" ]]; then
      log_warn "No Backstage CR found" > "$crs_dir/no-crs.txt"
      return 0
  fi

  log_debug "cr_namespaces: $cr_namespaces"
  log_debug "crs: $crs"

  # Process each namespace
  for cr_ns in $cr_namespaces; do
    log_info "--> Processing namespace $cr_ns containing at least one Backstage CR"

    cr_ns_dir="$crs_dir/ns=$cr_ns/"
    ensure_directory "$cr_ns_dir"

    collect_namespace_data "$cr_ns" "$cr_ns_dir"
  done

  # Process each cr
  for cr_info in $crs; do
      if [[ -z "$cr_info" ]]; then
          continue
      fi

      cr_ns=""
      cr_name="$cr_info"

      # Handle namespace/cr format from all-namespaces search
      if [[ "$cr_info" == *"/"* ]]; then
          cr_ns=$(echo "$cr_info" | cut -d'/' -f1)
          cr_name=$(echo "$cr_info" | cut -d'/' -f2)
      fi

      log_info "--> Processing Backstage CR $cr_name in namespace $cr_ns"

      cr_dir="$crs_dir/ns=$cr_ns/$cr_name"
      ensure_directory "$cr_dir"

      safe_exec "kubectl -n '$cr_ns' get backstages.rhdh.redhat.com '$cr_name' -o yaml" "$cr_dir/$cr_name.yaml" "Details of CR $cr_name"

      safe_exec "kubectl -n '$cr_ns' describe backstages.rhdh.redhat.com '$cr_name'" "$cr_dir/describe.txt" "Details of CR $cr_name"

      # Collect app-specific info
      deploy="backstage-$cr_name"
      statefulset="backstage-psql-$cr_name"
      collect_rhdh_data "$cr_ns" "$deploy" "$statefulset" "$cr_dir"
  done
}

gather_olm_information
gather_crds

namespace_args=$(get_namespace_args)
safe_exec "kubectl get deployments $namespace_args -l app=rhdh-operator" "$operator_dir/all-deployments.txt" "All RHDH Operator Deployments"

operatorNamespaces=$(oc get deployments $namespace_args -l app=rhdh-operator -o jsonpath="{.items[*].metadata.namespace}" 2>/dev/null || true)
log_info "Found Operator namespaces: $operatorNamespaces"

for operatorNamespace in $operatorNamespaces; do
  # Skip this namespace if namespace filtering is enabled and it's not in the target list
  if ! should_include_namespace "$operatorNamespace"; then
    log_debug "Skipping operator namespace $operatorNamespace (not in target list)"
    continue
  fi

  operator_ns_dir="$operator_dir/ns=$operatorNamespace"
  ensure_directory "$operator_ns_dir"

  safe_exec "kubectl get all -n \"${operatorNamespace}\"" "$operator_ns_dir/all-resources.txt" "All resources in $operatorNamespace"

  gather_operator_config "$operator_ns_dir" "$operatorNamespace"
  gather_deployments "$operator_ns_dir" "$operatorNamespace"
  gather_operator_logs "$operator_ns_dir" "$operatorNamespace"
done

gather_backstage_crs

log_success "... Operator data collection done."
