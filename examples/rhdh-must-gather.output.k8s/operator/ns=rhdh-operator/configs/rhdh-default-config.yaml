apiVersion: v1
data:
  app-config.yaml: [REDACTED]
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: my-backstage-config-cm1 # placeholder for <bs>-default-appconfig
    data:
      default.app-config.yaml: |
        ###########################################################################################################
        # /!\ WARNING
        #
        # This is the default app-config file created and managed by the Operator for your CR.
        # Do NOT edit this manually in the Cluster, as your changes will be overridden by the Operator upon the
        # next reconciliation.
        # If you want to customize the application configuration, you should create your own app-config ConfigMap
        # and reference it in your CR.
        # See https://docs.redhat.com/en/documentation/red_hat_developer_hub/1.4/html/configuring/provisioning-and-using-your-custom-configuration#provisioning-your-custom-configuration
        # for more details.
        ###########################################################################################################
        backend:
          auth:
            externalAccess:
              - type: legacy
                options:
                  subject: legacy-default-config
                  # This is a default value, which you should change by providing your own app-config
                  secret: "pl4s3Ch4ng3M3"
        auth:
          providers: {}
  db-secret.yaml: [REDACTED]
    apiVersion: v1
    kind: Secret
    metadata:
      name: postgres-secrets # will be replaced
    type: Opaque
    #stringData:
    #  POSTGRES_PASSWORD:
    #  POSTGRES_PORT: "5432"
    #  POSTGRES_USER: postgres
    #  POSTGRESQL_ADMIN_PASSWORD: admin123
    #  POSTGRES_HOST: bs1-db-service    #placeholder <crname>-db-service
  db-service.yaml: [REDACTED]
    apiVersion: v1
    kind: Service
    metadata:
      name: backstage-psql # placeholder for 'backstage-psql-<cr-name>' .NOTE: For the time it is static and linked to Secret-> postgres-secrets -> OSTGRES_HOST
    spec:
      selector:
        rhdh.redhat.com/app:  backstage-psql-cr1 # placeholder for 'backstage-psql-<cr-name>'
      clusterIP: None
      ports:
        - port: 5432
  db-statefulset.yaml: [REDACTED]
    apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      name: backstage-psql-cr1 # placeholder for 'backstage-psql-<cr-name>'
    spec:
      podManagementPolicy: OrderedReady
      # replicas: 1 # Intentionally omitted to allow HPA or custom scaling control.
      selector:
        matchLabels:
          rhdh.redhat.com/app: backstage-psql-cr1 # placeholder for 'backstage-psql-<cr-name>'
      serviceName: backstage-psql-cr1-hl # placeholder for 'backstage-psql-<cr-name>-hl'
      template:
        metadata:
          labels:
            rhdh.redhat.com/app: backstage-psql-cr1 # placeholder for 'backstage-psql-<cr-name>'
        spec:
          # fsGroup does not work for Openshift
          # AKS/EKS does not work w/o it
          #securityContext:
          #  fsGroup: 26
          automountServiceAccountToken: false
          ## https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/
          ## The optional .spec.persistentVolumeClaimRetentionPolicy field controls if and how PVCs are deleted during the lifecycle of a StatefulSet.
          ## You must enable the StatefulSetAutoDeletePVC feature gate on the API server and the controller manager to use this field.
    #      persistentVolumeClaimRetentionPolicy:
    #        whenDeleted: Retain
    #        whenScaled: Retain
          containers:
            - env:
                - name: POSTGRESQL_PORT_NUMBER
                  value: "5432"
                - name: POSTGRESQL_VOLUME_DIR
                  value: /var/lib/pgsql/data
                - name: PGDATA
                  value: /var/lib/pgsql/data/userdata
              image: quay.io/fedora/postgresql-15:latest # will be replaced with the actual image
              imagePullPolicy: IfNotPresent
              securityContext:
                # runAsUser:26 does not work for Openshift but looks work for AKS/EKS
                # runAsUser: 26
                runAsGroup: 0
                runAsNonRoot: true
                allowPrivilegeEscalation: false
                seccompProfile:
                  type: RuntimeDefault
                capabilities:
                  drop:
                    - ALL
              livenessProbe:
                exec:
                  command:
                    - /bin/sh
                    - -c
                    - exec pg_isready -U ${POSTGRES_USER} -h 127.0.0.1 -p 5432
                failureThreshold: 6
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              name: postgresql
              ports:
                - containerPort: 5432
                  name: tcp-postgresql
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                    - /bin/sh
                    - -c
                    - -e
                    - |
                      exec pg_isready -U ${POSTGRES_USER} -h 127.0.0.1 -p 5432
                failureThreshold: 6
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              resources:
                requests:
                  cpu: 250m
                  memory: 256Mi
                limits:
                  cpu: 250m
                  memory: 1024Mi
                  ephemeral-storage: 20Mi
              volumeMounts:
                - mountPath: /dev/shm
                  name: dshm
                - mountPath: /var/lib/pgsql/data
                  name: data
          restartPolicy: Always
          serviceAccountName: default
          volumes:
            - emptyDir:
                medium: Memory
              name: dshm
      updateStrategy:
        rollingUpdate:
          partition: 0
        type: RollingUpdate
      volumeClaimTemplates:
        - apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: data
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 1Gi
  db-statefulset.yaml.k8s: [REDACTED]
    # if securityContext not present in AKS/EKS, the error is like this:
    # Error: EACCES: permission denied, open '/dynamic-plugins-root/backstage-plugin-scaffolder-backend-module-github-dynamic-0.2.2.tgz'
    # fsGroup doesn not work for Openshift
    spec:
      template:
        spec:
          securityContext:
            # any group id
            fsGroup: 1001
  deployment.yaml: [REDACTED]
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: backstage # placeholder for 'backstage-<cr-name>'
    spec:
      # replicas: 1 # Intentionally omitted to allow HPA or custom scaling control.
      selector:
        matchLabels:
          rhdh.redhat.com/app: # placeholder for 'backstage-<cr-name>'
      template:
        metadata:
          labels:
            rhdh.redhat.com/app: # placeholder for 'backstage-<cr-name>'
        spec:
          automountServiceAccountToken: false
          # if securityContext not present in AKS/EKS, the error is like this:
          #Error: EACCES: permission denied, open '/dynamic-plugins-root/backstage-plugin-scaffolder-backend-module-github-dynamic-0.2.2.tgz'
          # fsGroup doesn not work for Openshift
          #securityContext:
          #   fsGroup: 1001
          volumes:
            - ephemeral:
                volumeClaimTemplate:
                  spec:
                    accessModes:
                      - ReadWriteOnce
                    resources:
                      requests:
                        storage: 2Gi
              name: dynamic-plugins-root
            # TODO Configuring dynamic plugins registry auth this way is deprecated and supported only for documentation backward compatibility.
            - name: dynamic-plugins-registry-auth
              secret:
                defaultMode: 416
                optional: true
                secretName: dynamic-plugins-registry-auth
            - emptyDir: {}
              name: npmcacache
            - name: temp
              emptyDir: {}
          initContainers:
            - name: install-dynamic-plugins
              command:
                - ./install-dynamic-plugins.sh
                - /dynamic-plugins-root
              # image will be replaced by the value of the `RELATED_IMAGE_backstage` env var, if set
              image: quay.io/rhdh/rhdh-hub-rhel9:next
              imagePullPolicy: IfNotPresent
              securityContext:
                readOnlyRootFilesystem: true
                runAsNonRoot: true
                allowPrivilegeEscalation: false
                seccompProfile:
                  type: RuntimeDefault
                capabilities:
                  drop:
                    - ALL
              env:
                - name: NPM_CONFIG_USERCONFIG
                  value: /opt/app-root/src/.npmrc.dynamic-plugins/.npmrc
                - name: MAX_ENTRY_SIZE
                  value: "30000000"
              volumeMounts:
                - mountPath: /dynamic-plugins-root
                  name: dynamic-plugins-root
                # TODO Configuring dynamic plugins registry auth this way is deprecated and supported only for documentation backward compatibility.
                - mountPath: /opt/app-root/src/.config/containers
                  name: dynamic-plugins-registry-auth
                  readOnly: true
                - mountPath: /opt/app-root/src/.npm/_cacache
                  name: npmcacache
                - mountPath: /tmp
                  name: temp
              workingDir: /opt/app-root/src
              resources:
                requests:
                  cpu: 250m
                  memory: 256Mi
                limits:
                  cpu: 1000m
                  memory: 2.5Gi
                  ephemeral-storage: 5Gi
          containers:
            - name: backstage-backend
              # image will be replaced by the value of the `RELATED_IMAGE_backstage` env var, if set
              image: quay.io/rhdh/rhdh-hub-rhel9:next
              imagePullPolicy: IfNotPresent
              args:
                - "--config"
                - "dynamic-plugins-root/app-config.dynamic-plugins.yaml"
              securityContext:
                capabilities:
                  drop:
                    - ALL
                seccompProfile:
                  type: RuntimeDefault
                runAsNonRoot: true
                allowPrivilegeEscalation: false
                readOnlyRootFilesystem: true
              startupProbe:
                # This gives enough time upon container startup before the liveness and readiness probes are triggered.
                # Giving (120s = initialDelaySeconds + failureThreshold * periodSeconds) to account for the worst case scenario.
                httpGet:
                  path: /.backstage/health/v1/liveness
                  port: backend
                  scheme: HTTP
                initialDelaySeconds: 30
                timeoutSeconds: 4
                periodSeconds: 20
                successThreshold: 1
                failureThreshold: 3
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /.backstage/health/v1/readiness
                  port: backend
                  scheme: HTTP
                # Both liveness and readiness probes won't be triggered until the startup probe is successful.
                # The startup probe is already configured to give enough time for the application to be started.
                # So removing the additional delay here allows the readiness probe to be checked right away after the startup probe,
                # which helps make the application available faster to the end-user.
                #initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 2
                timeoutSeconds: 4
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /.backstage/health/v1/liveness
                  port: backend
                  scheme: HTTP
                # Both liveness and readiness probes won't be triggered until the startup probe is successful.
                # The startup probe is already configured to give enough time for the application to be started.
                # So removing the additional delay here allows the readiness probe to be checked right away after the startup probe,
                # which helps make the application available faster to the end-user.
                #initialDelaySeconds: 60
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 4
              ports:
                - name: backend
                  containerPort: 7007
              env:
                - name: APP_CONFIG_backend_listen_port
                  value: "7007"
              volumeMounts:
                - mountPath: /opt/app-root/src/dynamic-plugins-root
                  name: dynamic-plugins-root
                - mountPath: /tmp
                  name: temp
              resources:
                requests:
                  cpu: 250m
                  memory: 256Mi
                limits:
                  cpu: 1000m
                  memory: 2.5Gi
                  ephemeral-storage: 5Gi
              workingDir: /opt/app-root/src
  deployment.yaml.k8s: [REDACTED]
    # if securityContext not present in AKS/EKS, the error is like this:
    # Error: EACCES: permission denied, open '/dynamic-plugins-root/backstage-plugin-scaffolder-backend-module-github-dynamic-0.2.2.tgz'
    # fsGroup doesn not work for Openshift
    spec:
      template:
        spec:
          securityContext:
            # any group id
            fsGroup: 1001
  dynamic-plugins.yaml: [REDACTED]
    #  must be the same as (deployment.yaml).spec.template.spec.volumes.name.dynamic-plugins-conf.configMap.name\n#data:\n#
    \ \"dynamic-plugins.yaml\": |\n#    ###########################################################################################################\n#
    \   # /!\\ WARNING\n#    #\n#    # This is the default dynamic plugins configuration
    file created and managed by the Operator for your CR.\n#    # Do NOT edit this
    manually in the Cluster, as your changes will be overridden by the Operator upon
    the\n#    # next reconciliation.\n#    # If you want to customize the dynamic
    plugins, you should create your own dynamic-plugins ConfigMap\n#    # and reference
    it in your CR.\n#    # See https://docs.redhat.com/en/documentation/red_hat_developer_hub/1.4/html/installing_and_viewing_plugins_in_red_hat_developer_hub/rhdh-installing-rhdh-plugins_title-plugins-rhdh-about#proc-config-dynamic-plugins-rhdh-operator_rhdh-installing-rhdh-plugins\n#
    \   # for more details or https://github.com/redhat-developer/rhdh-operator/blob/main/examples/rhdh-cr.yaml\n#
    \   # for an example.\n#    ###########################################################################################################\n#
    \   includes:\n#      - dynamic-plugins.default.yaml\n#    plugins: []\n#---\napiVersion:
    v1\nkind: ConfigMap\nmetadata:\n  name: default-dynamic-plugins\ndata:\n  dynamic-plugins.yaml:
    |\n    includes:\n      - dynamic-plugins.default.yaml\n    plugins:\n      -
    disabled: true\n        package: \"@redhat/backstage-plugin-orchestrator@1.7.1\"\n
    \       integrity: sha512-Cqu9EQwVQ4mpdgWTUA0MW89Gul0IklhvkkqVoO3CloQ1dnAj1XyXikCphzH5TmNDDd9K66dOpaKKCaW9KeJ4WA==\n
    \       pluginConfig:\n          dynamicPlugins:\n              frontend:\n                red-hat-developer-hub.backstage-plugin-orchestrator:\n
    \                 appIcons:\n                    - importName: OrchestratorIcon\n
    \                     name: orchestratorIcon\n                  dynamicRoutes:\n
    \                   - importName: OrchestratorPage\n                      menuItem:\n
    \                       icon: orchestratorIcon\n                        text:
    Orchestrator\n                      path: /orchestrator\n                  entityTabs:\n
    \                   - path: /workflows\n                      title: Workflows\n
    \                     mountPoint: entity.page.workflows\n                  mountPoints:\n
    \                   - mountPoint: entity.page.workflows/cards\n                      importName:
    OrchestratorCatalogTab\n                      config:\n                        layout:\n
    \                         gridColumn: '1 / -1'\n                          if:\n
    \                           anyOf:\n                              - IsOrchestratorCatalogTabAvailable\n
    \     - disabled: true\n        package: \"@redhat/backstage-plugin-orchestrator-backend-dynamic@1.7.1\"\n
    \       integrity: sha512-9cXbedr0lC7ns7SNqARrWSQI4JGcZFw5xpfpUzA1tJaMMUjzAdPHTXqljf62/fs4hYBK8TJsWJ2KJkGVMzbrHQ==\n
    \       pluginConfig:\n          orchestrator:\n            dataIndexService:\n
    \             url: http://sonataflow-platform-data-index-service\n        dependencies:\n
    \         - ref: sonataflow\n      - disabled: true\n        package: \"@redhat/backstage-plugin-scaffolder-backend-module-orchestrator-dynamic@1.7.1\"\n
    \       integrity: sha512-J1sTjA5kj6DphG8D65go9KlpIfKyLN/wq+XlY5Cb5djEo8mvF3wn3Haf60OGFo5cP4OfRSWqFwT7LM5/dNVwAg==\n
    \       pluginConfig:\n          orchestrator:\n            dataIndexService:\n
    \             url: http://sonataflow-platform-data-index-service               \n
    \     - disabled: true\n        package: \"@redhat/backstage-plugin-orchestrator-form-widgets@1.7.1\"\n
    \       integrity: sha512-0KIXrZoJ+O4xNNzN/zB4+VMuaRPuiUviAmM+fIhTo/P9aLA36F9aIlyMbUbki49uaJ0zd8KXMBvmJSHZNrYkGQ==\n
    \       pluginConfig:\n          dynamicPlugins:\n            frontend:\n              red-hat-developer-hub.backstage-plugin-orchestrator-form-widgets:
    { }"
  route.yaml: [REDACTED]
    apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      name: route # placeholder for 'backstage-<cr-name>'
    spec:
      port:
        targetPort: http-backend
      path: /
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
      to:
        kind: Service
        name:  # placeholder for 'backstage-<cr-name>'
  secret-files.yaml: [REDACTED]
    apiVersion: v1
    kind: Secret
    metadata:
      name: dynamic-plugins-npmrc
      annotations:
        rhdh.redhat.com/mount-path: /opt/app-root/src/.npmrc.dynamic-plugins
        rhdh.redhat.com/containers: install-dynamic-plugins
    type: Opaque
    stringData:
      .npmrc: |
        @redhat:registry=https://npm.registry.redhat.com
    #---
    # Placeholder for image registry ayth configuration for OCI dynamic plugins
    #apiVersion: v1
    #kind: Secret
    #metadata:
    #  name: dynamic-plugins-registry-auth
    #  annotations:
    #    rhdh.redhat.com/mount-path: /opt/app-root/src/.config/containers
    #    rhdh.redhat.com/containers: install-dynamic-plugins
    #type: Opaque


  service.yaml: [REDACTED]
    apiVersion: v1
    kind: Service
    metadata:
      name: backstage # placeholder for 'backstage-<cr-name>'
    spec:
      type: ClusterIP
      selector:
        rhdh.redhat.com/app:  # placeholder for 'backstage-<cr-name>'
      ports:
        - name: http-backend
          port: 80
          targetPort: backend
        - name: http-metrics
          protocol: TCP
          port: 9464
          targetPort: 9464
  service.yaml.k8s: [REDACTED]
    spec:
      type: NodePort
kind: ConfigMap
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","data":{"app-config.yaml":"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-backstage-config-cm1 # placeholder for \u003cbs\u003e-default-appconfig\ndata:\n  default.app-config.yaml: |\n    ###########################################################################################################\n    # /!\\ WARNING\n    #\n    # This is the default app-config file created and managed by the Operator for your CR.\n    # Do NOT edit this manually in the Cluster, as your changes will be overridden by the Operator upon the\n    # next reconciliation.\n    # If you want to customize the application configuration, you should create your own app-config ConfigMap\n    # and reference it in your CR.\n    # See https://docs.redhat.com/en/documentation/red_hat_developer_hub/1.4/html/configuring/provisioning-and-using-your-custom-configuration#provisioning-your-custom-configuration\n    # for more details.\n    ###########################################################################################################\n    backend:\n      auth:\n        externalAccess:\n          - type: legacy\n            options:\n              subject: legacy-default-config\n              # This is a default value, which you should change by providing your own app-config\n              secret: \"pl4s3Ch4ng3M3\"\n    auth:\n      providers: {}\n","db-secret.yaml":"apiVersion: v1\nkind: Secret\nmetadata:\n  name: postgres-secrets # will be replaced\ntype: Opaque\n#stringData:\n#  POSTGRES_PASSWORD:\n#  POSTGRES_PORT: \"5432\"\n#  POSTGRES_USER: postgres\n#  POSTGRESQL_ADMIN_PASSWORD: admin123\n#  POSTGRES_HOST: bs1-db-service    #placeholder \u003ccrname\u003e-db-service","db-service.yaml":"apiVersion: v1\nkind: Service\nmetadata:\n  name: backstage-psql # placeholder for 'backstage-psql-\u003ccr-name\u003e' .NOTE: For the time it is static and linked to Secret-\u003e postgres-secrets -\u003e OSTGRES_HOST\nspec:\n  selector:\n    rhdh.redhat.com/app:  backstage-psql-cr1 # placeholder for 'backstage-psql-\u003ccr-name\u003e'\n  clusterIP: None\n  ports:\n    - port: 5432\n","db-statefulset.yaml":"apiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: backstage-psql-cr1 # placeholder for 'backstage-psql-\u003ccr-name\u003e'\nspec:\n  podManagementPolicy: OrderedReady\n  # replicas: 1 # Intentionally omitted to allow HPA or custom scaling control.\n  selector:\n    matchLabels:\n      rhdh.redhat.com/app: backstage-psql-cr1 # placeholder for 'backstage-psql-\u003ccr-name\u003e'\n  serviceName: backstage-psql-cr1-hl # placeholder for 'backstage-psql-\u003ccr-name\u003e-hl'\n  template:\n    metadata:\n      labels:\n        rhdh.redhat.com/app: backstage-psql-cr1 # placeholder for 'backstage-psql-\u003ccr-name\u003e'\n    spec:\n      # fsGroup does not work for Openshift\n      # AKS/EKS does not work w/o it\n      #securityContext:\n      #  fsGroup: 26\n      automountServiceAccountToken: false\n      ## https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/\n      ## The optional .spec.persistentVolumeClaimRetentionPolicy field controls if and how PVCs are deleted during the lifecycle of a StatefulSet.\n      ## You must enable the StatefulSetAutoDeletePVC feature gate on the API server and the controller manager to use this field.\n#      persistentVolumeClaimRetentionPolicy:\n#        whenDeleted: Retain\n#        whenScaled: Retain\n      containers:\n        - env:\n            - name: POSTGRESQL_PORT_NUMBER\n              value: \"5432\"\n            - name: POSTGRESQL_VOLUME_DIR\n              value: /var/lib/pgsql/data\n            - name: PGDATA\n              value: /var/lib/pgsql/data/userdata\n          image: quay.io/fedora/postgresql-15:latest # will be replaced with the actual image\n          imagePullPolicy: IfNotPresent\n          securityContext:\n            # runAsUser:26 does not work for Openshift but looks work for AKS/EKS\n            # runAsUser: 26\n            runAsGroup: 0\n            runAsNonRoot: true\n            allowPrivilegeEscalation: false\n            seccompProfile:\n              type: RuntimeDefault\n            capabilities:\n              drop:\n                - ALL\n          livenessProbe:\n            exec:\n              command:\n                - /bin/sh\n                - -c\n                - exec pg_isready -U ${POSTGRES_USER} -h 127.0.0.1 -p 5432\n            failureThreshold: 6\n            initialDelaySeconds: 30\n            periodSeconds: 10\n            successThreshold: 1\n            timeoutSeconds: 5\n          name: postgresql\n          ports:\n            - containerPort: 5432\n              name: tcp-postgresql\n              protocol: TCP\n          readinessProbe:\n            exec:\n              command:\n                - /bin/sh\n                - -c\n                - -e\n                - |\n                  exec pg_isready -U ${POSTGRES_USER} -h 127.0.0.1 -p 5432\n            failureThreshold: 6\n            initialDelaySeconds: 5\n            periodSeconds: 10\n            successThreshold: 1\n            timeoutSeconds: 5\n          resources:\n            requests:\n              cpu: 250m\n              memory: 256Mi\n            limits:\n              cpu: 250m\n              memory: 1024Mi\n              ephemeral-storage: 20Mi\n          volumeMounts:\n            - mountPath: /dev/shm\n              name: dshm\n            - mountPath: /var/lib/pgsql/data\n              name: data\n      restartPolicy: Always\n      serviceAccountName: default\n      volumes:\n        - emptyDir:\n            medium: Memory\n          name: dshm\n  updateStrategy:\n    rollingUpdate:\n      partition: 0\n    type: RollingUpdate\n  volumeClaimTemplates:\n    - apiVersion: v1\n      kind: PersistentVolumeClaim\n      metadata:\n        name: data\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 1Gi","db-statefulset.yaml.k8s":"# if securityContext not present in AKS/EKS, the error is like this:\n# Error: EACCES: permission denied, open '/dynamic-plugins-root/backstage-plugin-scaffolder-backend-module-github-dynamic-0.2.2.tgz'\n# fsGroup doesn not work for Openshift\nspec:\n  template:\n    spec:\n      securityContext:\n        # any group id\n        fsGroup: 1001","deployment.yaml":"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: backstage # placeholder for 'backstage-\u003ccr-name\u003e'\nspec:\n  # replicas: 1 # Intentionally omitted to allow HPA or custom scaling control.\n  selector:\n    matchLabels:\n      rhdh.redhat.com/app: # placeholder for 'backstage-\u003ccr-name\u003e'\n  template:\n    metadata:\n      labels:\n        rhdh.redhat.com/app: # placeholder for 'backstage-\u003ccr-name\u003e'\n    spec:\n      automountServiceAccountToken: false\n      # if securityContext not present in AKS/EKS, the error is like this:\n      #Error: EACCES: permission denied, open '/dynamic-plugins-root/backstage-plugin-scaffolder-backend-module-github-dynamic-0.2.2.tgz'\n      # fsGroup doesn not work for Openshift\n      #securityContext:\n      #   fsGroup: 1001\n      volumes:\n        - ephemeral:\n            volumeClaimTemplate:\n              spec:\n                accessModes:\n                  - ReadWriteOnce\n                resources:\n                  requests:\n                    storage: 2Gi\n          name: dynamic-plugins-root\n        # TODO Configuring dynamic plugins registry auth this way is deprecated and supported only for documentation backward compatibility.\n        - name: dynamic-plugins-registry-auth\n          secret:\n            defaultMode: 416\n            optional: true\n            secretName: dynamic-plugins-registry-auth\n        - emptyDir: {}\n          name: npmcacache\n        - name: temp\n          emptyDir: {}\n      initContainers:\n        - name: install-dynamic-plugins\n          command:\n            - ./install-dynamic-plugins.sh\n            - /dynamic-plugins-root\n          # image will be replaced by the value of the `RELATED_IMAGE_backstage` env var, if set\n          image: quay.io/rhdh/rhdh-hub-rhel9:next\n          imagePullPolicy: IfNotPresent\n          securityContext:\n            readOnlyRootFilesystem: true\n            runAsNonRoot: true\n            allowPrivilegeEscalation: false\n            seccompProfile:\n              type: RuntimeDefault\n            capabilities:\n              drop:\n                - ALL\n          env:\n            - name: NPM_CONFIG_USERCONFIG\n              value: /opt/app-root/src/.npmrc.dynamic-plugins/.npmrc\n            - name: MAX_ENTRY_SIZE\n              value: \"30000000\"\n          volumeMounts:\n            - mountPath: /dynamic-plugins-root\n              name: dynamic-plugins-root\n            # TODO Configuring dynamic plugins registry auth this way is deprecated and supported only for documentation backward compatibility.\n            - mountPath: /opt/app-root/src/.config/containers\n              name: dynamic-plugins-registry-auth\n              readOnly: true\n            - mountPath: /opt/app-root/src/.npm/_cacache\n              name: npmcacache\n            - mountPath: /tmp\n              name: temp\n          workingDir: /opt/app-root/src\n          resources:\n            requests:\n              cpu: 250m\n              memory: 256Mi\n            limits:\n              cpu: 1000m\n              memory: 2.5Gi\n              ephemeral-storage: 5Gi\n      containers:\n        - name: backstage-backend\n          # image will be replaced by the value of the `RELATED_IMAGE_backstage` env var, if set\n          image: quay.io/rhdh/rhdh-hub-rhel9:next\n          imagePullPolicy: IfNotPresent\n          args:\n            - \"--config\"\n            - \"dynamic-plugins-root/app-config.dynamic-plugins.yaml\"\n          securityContext:\n            capabilities:\n              drop:\n                - ALL\n            seccompProfile:\n              type: RuntimeDefault\n            runAsNonRoot: true\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n          startupProbe:\n            # This gives enough time upon container startup before the liveness and readiness probes are triggered.\n            # Giving (120s = initialDelaySeconds + failureThreshold * periodSeconds) to account for the worst case scenario.\n            httpGet:\n              path: /.backstage/health/v1/liveness\n              port: backend\n              scheme: HTTP\n            initialDelaySeconds: 30\n            timeoutSeconds: 4\n            periodSeconds: 20\n            successThreshold: 1\n            failureThreshold: 3\n          readinessProbe:\n            failureThreshold: 3\n            httpGet:\n              path: /.backstage/health/v1/readiness\n              port: backend\n              scheme: HTTP\n            # Both liveness and readiness probes won't be triggered until the startup probe is successful.\n            # The startup probe is already configured to give enough time for the application to be started.\n            # So removing the additional delay here allows the readiness probe to be checked right away after the startup probe,\n            # which helps make the application available faster to the end-user.\n            #initialDelaySeconds: 30\n            periodSeconds: 10\n            successThreshold: 2\n            timeoutSeconds: 4\n          livenessProbe:\n            failureThreshold: 3\n            httpGet:\n              path: /.backstage/health/v1/liveness\n              port: backend\n              scheme: HTTP\n            # Both liveness and readiness probes won't be triggered until the startup probe is successful.\n            # The startup probe is already configured to give enough time for the application to be started.\n            # So removing the additional delay here allows the readiness probe to be checked right away after the startup probe,\n            # which helps make the application available faster to the end-user.\n            #initialDelaySeconds: 60\n            periodSeconds: 10\n            successThreshold: 1\n            timeoutSeconds: 4\n          ports:\n            - name: backend\n              containerPort: 7007\n          env:\n            - name: APP_CONFIG_backend_listen_port\n              value: \"7007\"\n          volumeMounts:\n            - mountPath: /opt/app-root/src/dynamic-plugins-root\n              name: dynamic-plugins-root\n            - mountPath: /tmp\n              name: temp\n          resources:\n            requests:\n              cpu: 250m\n              memory: 256Mi\n            limits:\n              cpu: 1000m\n              memory: 2.5Gi\n              ephemeral-storage: 5Gi\n          workingDir: /opt/app-root/src\n","deployment.yaml.k8s":"# if securityContext not present in AKS/EKS, the error is like this:\n# Error: EACCES: permission denied, open '/dynamic-plugins-root/backstage-plugin-scaffolder-backend-module-github-dynamic-0.2.2.tgz'\n# fsGroup doesn not work for Openshift\nspec:\n  template:\n    spec:\n      securityContext:\n        # any group id\n        fsGroup: 1001","dynamic-plugins.yaml":"#apiVersion: v1\n#kind: ConfigMap\n#metadata:\n#  name: default-dynamic-plugins #  must be the same as (deployment.yaml).spec.template.spec.volumes.name.dynamic-plugins-conf.configMap.name\n#data:\n#  \"dynamic-plugins.yaml\": |\n#    ###########################################################################################################\n#    # /!\\ WARNING\n#    #\n#    # This is the default dynamic plugins configuration file created and managed by the Operator for your CR.\n#    # Do NOT edit this manually in the Cluster, as your changes will be overridden by the Operator upon the\n#    # next reconciliation.\n#    # If you want to customize the dynamic plugins, you should create your own dynamic-plugins ConfigMap\n#    # and reference it in your CR.\n#    # See https://docs.redhat.com/en/documentation/red_hat_developer_hub/1.4/html/installing_and_viewing_plugins_in_red_hat_developer_hub/rhdh-installing-rhdh-plugins_title-plugins-rhdh-about#proc-config-dynamic-plugins-rhdh-operator_rhdh-installing-rhdh-plugins\n#    # for more details or https://github.com/redhat-developer/rhdh-operator/blob/main/examples/rhdh-cr.yaml\n#    # for an example.\n#    ###########################################################################################################\n#    includes:\n#      - dynamic-plugins.default.yaml\n#    plugins: []\n#---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: default-dynamic-plugins\ndata:\n  dynamic-plugins.yaml: |\n    includes:\n      - dynamic-plugins.default.yaml\n    plugins:\n      - disabled: true\n        package: \"@redhat/backstage-plugin-orchestrator@1.7.1\"\n        integrity: sha512-Cqu9EQwVQ4mpdgWTUA0MW89Gul0IklhvkkqVoO3CloQ1dnAj1XyXikCphzH5TmNDDd9K66dOpaKKCaW9KeJ4WA==\n        pluginConfig:\n          dynamicPlugins:\n              frontend:\n                red-hat-developer-hub.backstage-plugin-orchestrator:\n                  appIcons:\n                    - importName: OrchestratorIcon\n                      name: orchestratorIcon\n                  dynamicRoutes:\n                    - importName: OrchestratorPage\n                      menuItem:\n                        icon: orchestratorIcon\n                        text: Orchestrator\n                      path: /orchestrator\n                  entityTabs:\n                    - path: /workflows\n                      title: Workflows\n                      mountPoint: entity.page.workflows\n                  mountPoints:\n                    - mountPoint: entity.page.workflows/cards\n                      importName: OrchestratorCatalogTab\n                      config:\n                        layout:\n                          gridColumn: '1 / -1'\n                          if:\n                            anyOf:\n                              - IsOrchestratorCatalogTabAvailable\n      - disabled: true\n        package: \"@redhat/backstage-plugin-orchestrator-backend-dynamic@1.7.1\"\n        integrity: sha512-9cXbedr0lC7ns7SNqARrWSQI4JGcZFw5xpfpUzA1tJaMMUjzAdPHTXqljf62/fs4hYBK8TJsWJ2KJkGVMzbrHQ==\n        pluginConfig:\n          orchestrator:\n            dataIndexService:\n              url: http://sonataflow-platform-data-index-service\n        dependencies:\n          - ref: sonataflow\n      - disabled: true\n        package: \"@redhat/backstage-plugin-scaffolder-backend-module-orchestrator-dynamic@1.7.1\"\n        integrity: sha512-J1sTjA5kj6DphG8D65go9KlpIfKyLN/wq+XlY5Cb5djEo8mvF3wn3Haf60OGFo5cP4OfRSWqFwT7LM5/dNVwAg==\n        pluginConfig:\n          orchestrator:\n            dataIndexService:\n              url: http://sonataflow-platform-data-index-service               \n      - disabled: true\n        package: \"@redhat/backstage-plugin-orchestrator-form-widgets@1.7.1\"\n        integrity: sha512-0KIXrZoJ+O4xNNzN/zB4+VMuaRPuiUviAmM+fIhTo/P9aLA36F9aIlyMbUbki49uaJ0zd8KXMBvmJSHZNrYkGQ==\n        pluginConfig:\n          dynamicPlugins:\n            frontend:\n              red-hat-developer-hub.backstage-plugin-orchestrator-form-widgets: { }","route.yaml":"apiVersion: route.openshift.io/v1\nkind: Route\nmetadata:\n  name: route # placeholder for 'backstage-\u003ccr-name\u003e'\nspec:\n  port:\n    targetPort: http-backend\n  path: /\n  tls:\n    insecureEdgeTerminationPolicy: Redirect\n    termination: edge\n  to:\n    kind: Service\n    name:  # placeholder for 'backstage-\u003ccr-name\u003e'","secret-files.yaml":"apiVersion: v1\nkind: Secret\nmetadata:\n  name: dynamic-plugins-npmrc\n  annotations:\n    rhdh.redhat.com/mount-path: /opt/app-root/src/.npmrc.dynamic-plugins\n    rhdh.redhat.com/containers: install-dynamic-plugins\ntype: Opaque\nstringData:\n  .npmrc: |\n    @redhat:registry=https://npm.registry.redhat.com\n#---\n# Placeholder for image registry ayth configuration for OCI dynamic plugins\n#apiVersion: v1\n#kind: Secret\n#metadata:\n#  name: dynamic-plugins-registry-auth\n#  annotations:\n#    rhdh.redhat.com/mount-path: /opt/app-root/src/.config/containers\n#    rhdh.redhat.com/containers: install-dynamic-plugins\n#type: Opaque\n\n\n","service.yaml":"apiVersion: v1\nkind: Service\nmetadata:\n  name: backstage # placeholder for 'backstage-\u003ccr-name\u003e'\nspec:\n  type: ClusterIP\n  selector:\n    rhdh.redhat.com/app:  # placeholder for 'backstage-\u003ccr-name\u003e'\n  ports:\n    - name: http-backend\n      port: 80\n      targetPort: backend\n    - name: http-metrics\n      protocol: TCP\n      port: 9464\n      targetPort: 9464","service.yaml.k8s":"spec:\n  type: NodePort\n"},"kind":"ConfigMap","metadata":{"annotations":{},"name":"rhdh-default-config","namespace":"rhdh-operator"}}
  creationTimestamp: "2025-10-23T09:43:13Z"
  name: rhdh-default-config
  namespace: rhdh-operator
  resourceVersion: "1216"
  uid: df977f44-e173-429b-8a47-d66c187e8263
