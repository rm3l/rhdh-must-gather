---
apiVersion: apps/v1
items:
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-10-23T11:12:31Z"
    generation: 1
    labels:
      pod-template-hash: 67d5df4bcc
      rhdh.redhat.com/app: backstage-my-developer-hub-op
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:pod-template-hash: {}
            f:rhdh.redhat.com/app: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a2470261-55c9-4139-8240-d02ee7a9df56"}: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:rhdh.redhat.com/ext-config-hash: {}
              f:labels:
                .: {}
                f:pod-template-hash: {}
                f:rhdh.redhat.com/app: {}
            f:spec:
              f:automountServiceAccountToken: {}
              f:containers:
                k:{"name":"backstage-backend"}:
                  .: {}
                  f:args: {}
                  f:env:
                    .: {}
                    k:{"name":"APP_CONFIG_backend_listen_port"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:envFrom: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":7007,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:capabilities:
                      .: {}
                      f:drop: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsNonRoot: {}
                    f:seccompProfile:
                      .: {}
                      f:type: {}
                  f:startupProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/opt/app-root/src/default.app-config.yaml"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/opt/app-root/src/dynamic-plugins-root"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                  f:workingDir: {}
              f:dnsPolicy: {}
              f:initContainers:
                .: {}
                k:{"name":"install-dynamic-plugins"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"MAX_ENTRY_SIZE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NPM_CONFIG_USERCONFIG"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:capabilities:
                      .: {}
                      f:drop: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsNonRoot: {}
                    f:seccompProfile:
                      .: {}
                      f:type: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/dynamic-plugins-root"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/opt/app-root/src/.config/containers"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/opt/app-root/src/.npm/_cacache"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/opt/app-root/src/.npmrc.dynamic-plugins"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/opt/app-root/src/dynamic-plugins.yaml"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                  f:workingDir: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"backstage-appconfig-my-developer-hub-op"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                    f:optional: {}
                  f:name: {}
                k:{"name":"backstage-dynamic-plugins-my-developer-hub-op"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                    f:optional: {}
                  f:name: {}
                k:{"name":"backstage-files-my-developer-hub-op"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:optional: {}
                    f:secretName: {}
                k:{"name":"dynamic-plugins-registry-auth"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:optional: {}
                    f:secretName: {}
                k:{"name":"dynamic-plugins-root"}:
                  .: {}
                  f:ephemeral:
                    .: {}
                    f:volumeClaimTemplate:
                      .: {}
                      f:metadata:
                        .: {}
                        f:creationTimestamp: {}
                      f:spec:
                        .: {}
                        f:accessModes: {}
                        f:resources:
                          .: {}
                          f:requests:
                            .: {}
                            f:storage: {}
                        f:volumeMode: {}
                  f:name: {}
                k:{"name":"npmcacache"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"temp"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2025-10-23T11:12:30Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2025-10-23T11:17:56Z"
    name: backstage-my-developer-hub-op-67d5df4bcc
    namespace: my-ns
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: backstage-my-developer-hub-op
      uid: a2470261-55c9-4139-8240-d02ee7a9df56
    resourceVersion: "41431"
    uid: 6551025a-39f0-4067-8351-89f1226971ff
  spec:
    replicas: 1
    selector:
      matchLabels:
        pod-template-hash: 67d5df4bcc
        rhdh.redhat.com/app: backstage-my-developer-hub-op
    template:
      metadata:
        annotations:
          rhdh.redhat.com/ext-config-hash: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        creationTimestamp: null
        labels:
          pod-template-hash: 67d5df4bcc
          rhdh.redhat.com/app: backstage-my-developer-hub-op
      spec:
        automountServiceAccountToken: false
        containers:
        - args:
          - --config
          - dynamic-plugins-root/app-config.dynamic-plugins.yaml
          - --config
          - /opt/app-root/src/default.app-config.yaml
          env:
          - name: APP_CONFIG_backend_listen_port
            value: "7007"
          envFrom:
          - secretRef:
              name: backstage-psql-secret-my-developer-hub-op
          image: registry.redhat.io/rhdh/rhdh-hub-rhel9@sha256:0c76994fde2cd71471802d458b682ab652be5a0e291c3a2773cb524259ac79b2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /.backstage/health/v1/liveness
              port: backend
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 4
          name: backstage-backend
          ports:
          - containerPort: 7007
            name: backend
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /.backstage/health/v1/readiness
              port: backend
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 2
            timeoutSeconds: 4
          resources:
            limits:
              cpu: "1"
              ephemeral-storage: 5Gi
              memory: 2560Mi
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          startupProbe:
            failureThreshold: 3
            httpGet:
              path: /.backstage/health/v1/liveness
              port: backend
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 4
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/app-root/src/dynamic-plugins-root
            name: dynamic-plugins-root
          - mountPath: /tmp
            name: temp
          - mountPath: /opt/app-root/src/default.app-config.yaml
            name: backstage-appconfig-my-developer-hub-op
            readOnly: true
            subPath: default.app-config.yaml
          workingDir: /opt/app-root/src
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - ./install-dynamic-plugins.sh
          - /dynamic-plugins-root
          env:
          - name: NPM_CONFIG_USERCONFIG
            value: /opt/app-root/src/.npmrc.dynamic-plugins/.npmrc
          - name: MAX_ENTRY_SIZE
            value: "30000000"
          image: registry.redhat.io/rhdh/rhdh-hub-rhel9@sha256:0c76994fde2cd71471802d458b682ab652be5a0e291c3a2773cb524259ac79b2
          imagePullPolicy: IfNotPresent
          name: install-dynamic-plugins
          resources:
            limits:
              cpu: "1"
              ephemeral-storage: 5Gi
              memory: 2560Mi
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /dynamic-plugins-root
            name: dynamic-plugins-root
          - mountPath: /opt/app-root/src/.config/containers
            name: dynamic-plugins-registry-auth
            readOnly: true
          - mountPath: /opt/app-root/src/.npm/_cacache
            name: npmcacache
          - mountPath: /tmp
            name: temp
          - mountPath: /opt/app-root/src/dynamic-plugins.yaml
            name: backstage-dynamic-plugins-my-developer-hub-op
            readOnly: true
            subPath: dynamic-plugins.yaml
          - mountPath: /opt/app-root/src/.npmrc.dynamic-plugins
            name: backstage-files-my-developer-hub-op
          workingDir: /opt/app-root/src
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - ephemeral:
            volumeClaimTemplate:
              metadata:
                creationTimestamp: null
              spec:
                accessModes:
                - ReadWriteOnce
                resources:
                  requests:
                    storage: 2Gi
                volumeMode: Filesystem
          name: dynamic-plugins-root
        - name: dynamic-plugins-registry-auth
          secret:
            defaultMode: 416
            optional: true
            secretName: dynamic-plugins-registry-auth
        - emptyDir: {}
          name: npmcacache
        - emptyDir: {}
          name: temp
        - configMap:
            defaultMode: 420
            name: backstage-appconfig-my-developer-hub-op
            optional: false
          name: backstage-appconfig-my-developer-hub-op
        - configMap:
            defaultMode: 420
            name: backstage-dynamic-plugins-my-developer-hub-op
            optional: false
          name: backstage-dynamic-plugins-my-developer-hub-op
        - name: backstage-files-my-developer-hub-op
          secret:
            defaultMode: 420
            optional: false
            secretName: backstage-files-my-developer-hub-op
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: redhat-developer-hub-helm
      meta.helm.sh/release-namespace: my-ns
    creationTimestamp: "2025-10-23T11:11:18Z"
    generation: 1
    labels:
      app.kubernetes.io/component: backstage
      app.kubernetes.io/instance: redhat-developer-hub-helm
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: developer-hub
      helm.sh/chart: upstream-2.6.0
      pod-template-hash: 6698c6d684
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:helm.sh/chart: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"ed3f9b1f-5409-4cab-9d62-9b8a87afa6db"}: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:checksum/app-config: {}
                f:checksum/dynamic-plugins: {}
              f:labels:
                .: {}
                f:app.kubernetes.io/component: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/managed-by: {}
                f:app.kubernetes.io/name: {}
                f:helm.sh/chart: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"backstage-backend"}:
                  .: {}
                  f:args: {}
                  f:env:
                    .: {}
                    k:{"name":"APP_CONFIG_backend_listen_port"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"BACKEND_SECRET"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:secretKeyRef: {}
                    k:{"name":"POSTGRES_HOST"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POSTGRES_PASSWORD"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:secretKeyRef: {}
                    k:{"name":"POSTGRES_PORT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POSTGRES_USER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POSTGRESQL_ADMIN_PASSWORD"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:secretKeyRef: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":7007,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:capabilities:
                      .: {}
                      f:drop: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsNonRoot: {}
                    f:seccompProfile:
                      .: {}
                      f:type: {}
                  f:startupProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/opt/app-root/src/app-config-from-configmap.yaml"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:subPath: {}
                    k:{"mountPath":"/opt/app-root/src/dynamic-plugins-root"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:initContainers:
                .: {}
                k:{"name":"install-dynamic-plugins"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"MAX_ENTRY_SIZE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NPM_CONFIG_USERCONFIG"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:capabilities:
                      .: {}
                      f:drop: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsNonRoot: {}
                    f:seccompProfile:
                      .: {}
                      f:type: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/dynamic-plugins-root"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/opt/app-root/src/.config/containers"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/opt/app-root/src/.npm/_cacache"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/opt/app-root/src/.npmrc.dynamic-plugins"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/opt/app-root/src/dynamic-plugins.yaml"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                  f:workingDir: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"backstage-app-config"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"dynamic-plugins"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                    f:optional: {}
                  f:name: {}
                k:{"name":"dynamic-plugins-npmrc"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:optional: {}
                    f:secretName: {}
                k:{"name":"dynamic-plugins-registry-auth"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:optional: {}
                    f:secretName: {}
                k:{"name":"dynamic-plugins-root"}:
                  .: {}
                  f:ephemeral:
                    .: {}
                    f:volumeClaimTemplate:
                      .: {}
                      f:metadata:
                        .: {}
                        f:creationTimestamp: {}
                      f:spec:
                        .: {}
                        f:accessModes: {}
                        f:resources:
                          .: {}
                          f:requests:
                            .: {}
                            f:storage: {}
                        f:volumeMode: {}
                  f:name: {}
                k:{"name":"npmcacache"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"temp"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2025-10-23T11:11:18Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: "2025-10-23T11:16:17Z"
    name: redhat-developer-hub-helm-6698c6d684
    namespace: my-ns
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: redhat-developer-hub-helm
      uid: ed3f9b1f-5409-4cab-9d62-9b8a87afa6db
    resourceVersion: "41191"
    uid: a5126190-8382-4e2f-a7d4-637f70d350dc
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: backstage
        app.kubernetes.io/instance: redhat-developer-hub-helm
        app.kubernetes.io/name: developer-hub
        pod-template-hash: 6698c6d684
    template:
      metadata:
        annotations:
          checksum/app-config: 008f6f5145cbfd5a4b66c2f9ba302b675cc1204617e067623e3c73e543278882
          checksum/dynamic-plugins: f1f9a92f14a31362d7eb30e67ac1458faf1c685765610f93a8967194d8bc1a5f
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: backstage
          app.kubernetes.io/instance: redhat-developer-hub-helm
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: developer-hub
          helm.sh/chart: upstream-2.6.0
          pod-template-hash: 6698c6d684
      spec:
        containers:
        - args:
          - --config
          - dynamic-plugins-root/app-config.dynamic-plugins.yaml
          - --config
          - /opt/app-root/src/app-config-from-configmap.yaml
          env:
          - name: APP_CONFIG_backend_listen_port
            value: "7007"
          - name: POSTGRES_HOST
            value: redhat-developer-hub-helm-postgresql
          - name: POSTGRES_PORT
            value: "5432"
          - name: POSTGRES_USER
            value: bn_backstage
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: redhat-developer-hub-helm-postgresql
          - name: BACKEND_SECRET
            valueFrom:
              secretKeyRef:
                key: backend-secret
                name: redhat-developer-hub-helm-auth
          - name: POSTGRESQL_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgres-password
                name: redhat-developer-hub-helm-postgresql
          image: registry.redhat.io/rhdh/rhdh-hub-rhel9@sha256:62f32e50727c5006766a34daa5b6472b649cd9894f3fe9543b8ecc67e6760e8e
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /.backstage/health/v1/liveness
              port: backend
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 4
          name: backstage-backend
          ports:
          - containerPort: 7007
            name: backend
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /.backstage/health/v1/readiness
              port: backend
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 2
            timeoutSeconds: 4
          resources:
            limits:
              cpu: "1"
              ephemeral-storage: 5Gi
              memory: 2560Mi
            requests:
              cpu: 250m
              memory: 1Gi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          startupProbe:
            failureThreshold: 3
            httpGet:
              path: /.backstage/health/v1/liveness
              port: backend
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 4
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/app-root/src/app-config-from-configmap.yaml
            name: backstage-app-config
            subPath: app-config.yaml
          - mountPath: /opt/app-root/src/dynamic-plugins-root
            name: dynamic-plugins-root
          - mountPath: /tmp
            name: temp
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - ./install-dynamic-plugins.sh
          - /dynamic-plugins-root
          env:
          - name: NPM_CONFIG_USERCONFIG
            value: /opt/app-root/src/.npmrc.dynamic-plugins
          - name: MAX_ENTRY_SIZE
            value: "30000000"
          image: registry.redhat.io/rhdh/rhdh-hub-rhel9@sha256:62f32e50727c5006766a34daa5b6472b649cd9894f3fe9543b8ecc67e6760e8e
          imagePullPolicy: Always
          name: install-dynamic-plugins
          resources:
            limits:
              cpu: "1"
              ephemeral-storage: 5Gi
              memory: 2560Mi
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /dynamic-plugins-root
            name: dynamic-plugins-root
          - mountPath: /opt/app-root/src/dynamic-plugins.yaml
            name: dynamic-plugins
            readOnly: true
            subPath: dynamic-plugins.yaml
          - mountPath: /opt/app-root/src/.npmrc.dynamic-plugins
            name: dynamic-plugins-npmrc
            readOnly: true
            subPath: .npmrc
          - mountPath: /opt/app-root/src/.config/containers
            name: dynamic-plugins-registry-auth
            readOnly: true
          - mountPath: /opt/app-root/src/.npm/_cacache
            name: npmcacache
          - mountPath: /tmp
            name: temp
          workingDir: /opt/app-root/src
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: default
        serviceAccountName: default
        terminationGracePeriodSeconds: 30
        volumes:
        - ephemeral:
            volumeClaimTemplate:
              metadata:
                creationTimestamp: null
              spec:
                accessModes:
                - ReadWriteOnce
                resources:
                  requests:
                    storage: 5Gi
                volumeMode: Filesystem
          name: dynamic-plugins-root
        - configMap:
            defaultMode: 420
            name: redhat-developer-hub-helm-dynamic-plugins
            optional: true
          name: dynamic-plugins
        - name: dynamic-plugins-npmrc
          secret:
            defaultMode: 420
            optional: true
            secretName: redhat-developer-hub-helm-dynamic-plugins-npmrc
        - name: dynamic-plugins-registry-auth
          secret:
            defaultMode: 416
            optional: true
            secretName: redhat-developer-hub-helm-dynamic-plugins-registry-auth
        - emptyDir: {}
          name: npmcacache
        - emptyDir: {}
          name: temp
        - configMap:
            defaultMode: 420
            name: redhat-developer-hub-helm-app-config
          name: backstage-app-config
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
kind: ReplicaSetList
metadata:
  resourceVersion: "42035"
