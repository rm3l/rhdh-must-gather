#!/bin/bash

# Cluster Information Collection Script
# Collects general cluster information (nodes, version, storage, networking, RBAC)

set -euo pipefail

# Source utilities
source "$(dirname "$0")/lib/utils.sh"

collect_basic_cluster_info() {
    log_info "Collecting basic cluster information..."
    
    local cluster_dir="$MUST_GATHER_DIR/cluster-info"
    ensure_directory "$cluster_dir"
    
    # Basic cluster info
    safe_exec "kubectl cluster-info" "$cluster_dir/cluster-info.txt" "Cluster info"
    safe_exec "kubectl version --output=yaml" "$cluster_dir/version.yaml" "Kubernetes version"
    
    # API server info
    safe_exec "kubectl get --raw /version" "$cluster_dir/api-version.json" "API server version"
    safe_exec "kubectl api-resources" "$cluster_dir/api-resources.txt" "Available API resources"
    safe_exec "kubectl api-versions" "$cluster_dir/api-versions.txt" "Available API versions"
}

collect_node_information() {
    log_info "Collecting node information..."
    
    local cluster_dir="$MUST_GATHER_DIR/cluster-info"
    
    # Node information
    safe_exec "kubectl get nodes -o wide" "$cluster_dir/nodes.txt" "Node information"
    safe_exec "kubectl get nodes -o yaml" "$cluster_dir/nodes.yaml" "Node details (YAML)"
    safe_exec "kubectl describe nodes" "$cluster_dir/nodes-describe.txt" "Node descriptions"
    
    # Node conditions and capacity
    safe_exec "kubectl get nodes -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.status.conditions[?(@.type==\"Ready\")].status}{\"\\n\"}{end}'" "$cluster_dir/node-readiness.txt" "Node readiness status"
    safe_exec "kubectl top nodes" "$cluster_dir/node-usage.txt" "Node resource usage" || log_warn "Metrics server might not be available"
}

collect_storage_info() {
    log_info "Collecting storage information..."
    
    local cluster_dir="$MUST_GATHER_DIR/cluster-info"
    
    # Storage classes
    safe_exec "kubectl get storageclass" "$cluster_dir/storageclasses.txt" "Storage classes list"
    safe_exec "kubectl get storageclass -o yaml" "$cluster_dir/storageclasses.yaml" "Storage classes details"
    safe_exec "kubectl describe storageclass" "$cluster_dir/storageclasses-describe.txt" "Storage class descriptions"
    
    # Persistent volumes
    safe_exec "kubectl get pv" "$cluster_dir/persistent-volumes.txt" "Persistent volumes list"
    safe_exec "kubectl get pv -o yaml" "$cluster_dir/persistent-volumes.yaml" "Persistent volumes details"
    
    # Volume snapshots (if available)
    if kubectl api-resources | grep -q volumesnapshot; then
        safe_exec "kubectl get volumesnapshot --all-namespaces" "$cluster_dir/volume-snapshots.txt" "Volume snapshots"
        safe_exec "kubectl get volumesnapshotclass" "$cluster_dir/volume-snapshot-classes.txt" "Volume snapshot classes"
    fi
}

collect_networking_info() {
    log_info "Collecting networking information..."
    
    local cluster_dir="$MUST_GATHER_DIR/cluster-info"
    
    # Network policies
    safe_exec "kubectl get networkpolicy --all-namespaces" "$cluster_dir/networkpolicies.txt" "Network policies list"
    safe_exec "kubectl get networkpolicy --all-namespaces -o yaml" "$cluster_dir/networkpolicies.yaml" "Network policies details"
    
    # Services
    safe_exec "kubectl get services --all-namespaces" "$cluster_dir/services.txt" "All services"
    safe_exec "kubectl get services --all-namespaces -o yaml" "$cluster_dir/services.yaml" "Services details"
    
    # Ingress
    safe_exec "kubectl get ingress --all-namespaces" "$cluster_dir/ingress.txt" "Ingress resources"
    safe_exec "kubectl get ingress --all-namespaces -o yaml" "$cluster_dir/ingress.yaml" "Ingress details"
    
    # Endpoints
    safe_exec "kubectl get endpoints --all-namespaces" "$cluster_dir/endpoints.txt" "Service endpoints"
    
    # CNI and network configuration
    safe_exec "kubectl get pods -n kube-system -l app=calico-node -o wide" "$cluster_dir/cni-calico-pods.txt" "Calico pods" || true
    safe_exec "kubectl get pods -n kube-system -l k8s-app=flannel -o wide" "$cluster_dir/cni-flannel-pods.txt" "Flannel pods" || true
    safe_exec "kubectl get pods -n kube-system -l app=weave-net -o wide" "$cluster_dir/cni-weave-pods.txt" "Weave Net pods" || true
}

collect_rbac_info() {
    log_info "Collecting RBAC information..."
    
    local cluster_dir="$MUST_GATHER_DIR/cluster-info"
    
    # Cluster roles and bindings
    safe_exec "kubectl get clusterroles" "$cluster_dir/clusterroles.txt" "Cluster roles list"
    safe_exec "kubectl get clusterroles -o yaml" "$cluster_dir/clusterroles.yaml" "Cluster roles details"
    safe_exec "kubectl get clusterrolebindings" "$cluster_dir/clusterrolebindings.txt" "Cluster role bindings list"
    safe_exec "kubectl get clusterrolebindings -o yaml" "$cluster_dir/clusterrolebindings.yaml" "Cluster role bindings details"
    
    # Service accounts
    safe_exec "kubectl get serviceaccounts --all-namespaces" "$cluster_dir/serviceaccounts.txt" "Service accounts"
    
    # Pod security policies (if available)
    if kubectl api-resources | grep -q podsecuritypolicy; then
        safe_exec "kubectl get podsecuritypolicy" "$cluster_dir/pod-security-policies.txt" "Pod Security Policies"
        safe_exec "kubectl get podsecuritypolicy -o yaml" "$cluster_dir/pod-security-policies.yaml" "Pod Security Policy details"
    fi
}

collect_openshift_specific() {
    local cluster_type="$1"
    
    if [[ "$cluster_type" != "openshift" ]]; then
        log_debug "Skipping OpenShift-specific collection (not an OpenShift cluster)"
        return 0
    fi
    
    log_info "Collecting OpenShift-specific information..."
    
    local cluster_dir="$MUST_GATHER_DIR/cluster-info"
    
    # OpenShift cluster version
    safe_exec "oc get clusterversion" "$cluster_dir/openshift-clusterversion.txt" "OpenShift cluster version"
    safe_exec "oc get clusterversion -o yaml" "$cluster_dir/openshift-clusterversion.yaml" "OpenShift cluster version details"
    
    # Cluster operators
    safe_exec "oc get clusteroperators" "$cluster_dir/openshift-clusteroperators.txt" "OpenShift cluster operators"
    safe_exec "oc get clusteroperators -o yaml" "$cluster_dir/openshift-clusteroperators.yaml" "Cluster operators details"
    
    # Routes
    safe_exec "oc get routes --all-namespaces" "$cluster_dir/openshift-routes.txt" "OpenShift routes"
    safe_exec "oc get routes --all-namespaces -o yaml" "$cluster_dir/openshift-routes.yaml" "Route details"
    
    # Image streams
    safe_exec "oc get imagestreams --all-namespaces" "$cluster_dir/openshift-imagestreams.txt" "Image streams"
    
    # Security Context Constraints
    safe_exec "oc get scc" "$cluster_dir/openshift-scc.txt" "Security Context Constraints"
    safe_exec "oc get scc -o yaml" "$cluster_dir/openshift-scc.yaml" "SCC details"
    
    # Projects (OpenShift namespaces)
    safe_exec "oc get projects" "$cluster_dir/openshift-projects.txt" "OpenShift projects"
    
    # OAuth configuration
    safe_exec "oc get oauth cluster -o yaml" "$cluster_dir/openshift-oauth.yaml" "OAuth configuration" || true
    
    # Console configuration
    safe_exec "oc get console cluster -o yaml" "$cluster_dir/openshift-console.yaml" "Console configuration" || true
    
    # Operators (OLM)
    safe_exec "oc get csv --all-namespaces" "$cluster_dir/openshift-csv.txt" "ClusterServiceVersions" || true
    safe_exec "oc get subscription --all-namespaces" "$cluster_dir/openshift-subscriptions.txt" "Operator subscriptions" || true
    safe_exec "oc get operatorgroup --all-namespaces" "$cluster_dir/openshift-operatorgroups.txt" "Operator groups" || true
}

collect_resource_quotas_and_limits() {
    log_info "Collecting resource quotas and limits..."
    
    local cluster_dir="$MUST_GATHER_DIR/cluster-info"
    
    # Resource quotas
    safe_exec "kubectl get resourcequota --all-namespaces" "$cluster_dir/resource-quotas.txt" "Resource quotas"
    safe_exec "kubectl get resourcequota --all-namespaces -o yaml" "$cluster_dir/resource-quotas.yaml" "Resource quota details"
    
    # Limit ranges
    safe_exec "kubectl get limitrange --all-namespaces" "$cluster_dir/limit-ranges.txt" "Limit ranges"
    safe_exec "kubectl get limitrange --all-namespaces -o yaml" "$cluster_dir/limit-ranges.yaml" "Limit range details"
    
    # Priority classes
    safe_exec "kubectl get priorityclass" "$cluster_dir/priority-classes.txt" "Priority classes"
    safe_exec "kubectl get priorityclass -o yaml" "$cluster_dir/priority-classes.yaml" "Priority class details"
}

collect_cluster_events() {
    log_info "Collecting cluster-wide events..."
    
    local cluster_dir="$MUST_GATHER_DIR/cluster-info"
    
    # Recent cluster events
    safe_exec "kubectl get events --all-namespaces --sort-by='.lastTimestamp'" "$cluster_dir/cluster-events.txt" "Cluster events (sorted by time)"
    safe_exec "kubectl get events --all-namespaces --field-selector type=Warning --sort-by='.lastTimestamp'" "$cluster_dir/cluster-events-warnings.txt" "Warning events"
    safe_exec "kubectl get events --all-namespaces --field-selector type=Error --sort-by='.lastTimestamp'" "$cluster_dir/cluster-events-errors.txt" "Error events"
}

# Main execution
main() {
    log_info "Starting cluster information collection..."
    
    if ! check_cluster_connectivity; then
        log_error "Cannot connect to cluster"
        exit 1
    fi
    
    # Load detection results to determine cluster type
    load_detection_results
    local cluster_type="${CLUSTER_TYPE:-kubernetes}"
    
    log_info "Collecting information for $cluster_type cluster"
    
    # Collect all cluster information
    collect_basic_cluster_info
    collect_node_information
    collect_storage_info
    collect_networking_info
    collect_rbac_info
    collect_resource_quotas_and_limits
    collect_cluster_events
    
    # OpenShift-specific collection
    collect_openshift_specific "$cluster_type"
    
    # Create summary
    cat > "$MUST_GATHER_DIR/cluster-info/collection-summary.txt" << EOF
Cluster Information Collection Summary
=====================================
Collection Time: $(date)
Cluster Type: $cluster_type

Collected Information:
- Basic cluster info and API server details
- Node information and resource usage
- Storage classes and persistent volumes
- Networking configuration and policies
- RBAC (roles, bindings, service accounts)
- Resource quotas and limits
- Cluster-wide events
$([[ "$cluster_type" == "openshift" ]] && echo "- OpenShift-specific resources (operators, routes, SCCs)")

Files Created:
$(find "$MUST_GATHER_DIR/cluster-info" -type f -name "*.txt" -o -name "*.yaml" -o -name "*.json" | wc -l) files in cluster-info directory
EOF
    
    log_success "Cluster information collection completed"
}

# Show help
show_help() {
    cat << EOF
Cluster Information Collection Script

Usage: $0 [OPTIONS]

This script collects general cluster information including nodes, storage,
networking, RBAC, and OpenShift-specific resources.

Options:
  -h, --help    Show this help message

Environment Variables:
  MUST_GATHER_DIR   Output directory (default: /must-gather)
  LOG_LEVEL         Logging level (default: INFO)

Collected Information:
  - Cluster version and API details
  - Node information and resource usage
  - Storage classes and persistent volumes
  - Network policies and services
  - RBAC configuration
  - Resource quotas and limits
  - Cluster events
  - OpenShift-specific resources (if applicable)

Examples:
  $0                # Collect cluster information
  LOG_LEVEL=DEBUG $0 # Collect with debug logging

Output:
  - Creates cluster-info/ directory with collected data
  - Generates collection-summary.txt with details
EOF
}

# Handle command line arguments
if [[ "${1:-}" == "-h" ]] || [[ "${1:-}" == "--help" ]]; then
    show_help
    exit 0
fi

# Execute main function
main "$@"