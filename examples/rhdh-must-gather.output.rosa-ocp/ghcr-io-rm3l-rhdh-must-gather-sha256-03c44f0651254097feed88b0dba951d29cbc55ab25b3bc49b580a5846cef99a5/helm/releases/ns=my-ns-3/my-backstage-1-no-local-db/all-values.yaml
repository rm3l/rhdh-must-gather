COMPUTED VALUES:
common:
  exampleValue: common-chart
  global:
    auth:
      backend:
        enabled: true
        existingSecret: ""
        value: ""
    clusterRouterBase: apps.example.com
    dynamic:
      includes:
      - dynamic-plugins.default.yaml
      plugins: []
    host: ""
global:
  auth:
    backend:
      enabled: true
      existingSecret: ""
      value: ""
  clusterRouterBase: apps.rosa.uavnn-6zmwg-wn7.om9c.p3.openshiftapps.com
  dynamic:
    includes:
    - dynamic-plugins.default.yaml
    plugins: []
  host: ""
nameOverride: developer-hub
orchestrator:
  enabled: false
  plugins:
  - disabled: false
    integrity: sha512-Kr55YbuVwEADwGef9o9wyimcgHmiwehPeAtVHa9g2RQYoSPEa6BeOlaPzB6W5Ke3M2bN/0j0XXtpLuvrlXQogA==
    package: https://npm.registry.redhat.com/@redhat/backstage-plugin-orchestrator-backend-dynamic/-/backstage-plugin-orchestrator-backend-dynamic-1.6.0.tgz
    pluginConfig:
      orchestrator:
        dataIndexService:
          url: http://sonataflow-platform-data-index-service.{{ .Release.Namespace
            }}
  - disabled: false
    integrity: sha512-fOSJv2PgtD2urKwBM7p9W6gV/0UIHSf4pkZ9V/wQO0eg0Zi5Mys/CL1ba3nO9x9l84MX11UBZ2r7PPVJPrmOtw==
    package: https://npm.registry.redhat.com/@redhat/backstage-plugin-orchestrator/-/backstage-plugin-orchestrator-1.6.0.tgz
    pluginConfig:
      dynamicPlugins:
        frontend:
          red-hat-developer-hub.backstage-plugin-orchestrator:
            appIcons:
            - importName: OrchestratorIcon
              name: orchestratorIcon
            dynamicRoutes:
            - importName: OrchestratorPage
              menuItem:
                icon: orchestratorIcon
                text: Orchestrator
              path: /orchestrator
  - disabled: false
    integrity: sha512-Bueeix4661fXEnfJ9y31Yw91LXJgw6hJUG7lPVdESCi9VwBCjDB9Rm8u2yPqP8sriwr0OMtKtqD+Odn3LOPyVw==
    package: https://npm.registry.redhat.com/@redhat/backstage-plugin-scaffolder-backend-module-orchestrator-dynamic/-/backstage-plugin-scaffolder-backend-module-orchestrator-dynamic-1.6.0.tgz
    pluginConfig:
      orchestrator:
        dataIndexService:
          url: http://sonataflow-platform-data-index-service.{{ .Release.Namespace
            }}
  - disabled: false
    integrity: sha512-Tqn6HO21Q1TQ7TFUoRhwBVCtSBzbQYz+OaanzzIB0R24O6YtVx3wR7Chtr5TzC05Vz5GkBO1+FZid8BKpqljgA==
    package: https://npm.registry.redhat.com/@redhat/backstage-plugin-orchestrator-form-widgets/-/backstage-plugin-orchestrator-form-widgets-1.6.0.tgz
    pluginConfig:
      dynamicPlugins:
        frontend:
          red-hat-developer-hub.backstage-plugin-orchestrator-form-widgets: {}
  serverlessLogicOperator:
    enabled: true
  serverlessOperator:
    enabled: true
  sonataflowPlatform:
    createDBJobImage: '{{ .Values.upstream.postgresql.image.registry }}/{{ .Values.upstream.postgresql.image.repository
      }}:{{ .Values.upstream.postgresql.image.tag }}'
    dataIndexImage: ""
    eventing:
      broker:
        name: ""
        namespace: ""
    externalDBHost: ""
    externalDBName: ""
    externalDBPort: ""
    externalDBsecretRef: ""
    initContainerImage: '{{ .Values.upstream.postgresql.image.registry }}/{{ .Values.upstream.postgresql.image.repository
      }}:{{ .Values.upstream.postgresql.image.tag }}'
    jobServiceImage: ""
    monitoring:
      enabled: true
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 64Mi
route:
  annotations: {}
  enabled: true
  host: '{{ .Values.global.host }}'
  path: /
  tls:
    caCertificate: ""
    certificate: ""
    destinationCACertificate: ""
    enabled: true
    insecureEdgeTerminationPolicy: Redirect
    key: ""
    termination: edge
  wildcardPolicy: None
test:
  enabled: true
  image:
    registry: quay.io
    repository: curl/curl
    tag: latest
  injectTestNpmrcSecret: false
upstream:
  backstage:
    affinity: {}
    annotations: {}
    appConfig:
      app:
        baseUrl: https://{{- include "janus-idp.hostname" . }}
      auth:
        providers: {}
      backend:
        auth:
          externalAccess:
          - options:
              secret: ${BACKEND_SECRET}
              subject: legacy-default-config
            type: legacy
        baseUrl: https://{{- include "janus-idp.hostname" . }}
        cors:
          origin: https://{{- include "janus-idp.hostname" . }}
        database:
          connection:
            password: ${POSTGRESQL_ADMIN_PASSWORD}
            user: postgres
    args:
    - --config
    - dynamic-plugins-root/app-config.dynamic-plugins.yaml
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    command: []
    containerPorts:
      backend: 7007
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    extraAppConfig: []
    extraContainers: []
    extraEnvVars:
    - name: BACKEND_SECRET
      valueFrom:
        secretKeyRef:
          key: backend-secret
          name: '{{ include "janus-idp.backend-secret-name" $ }}'
    - name: POSTGRESQL_ADMIN_PASSWORD
      valueFrom:
        secretKeyRef:
          key: postgres-password
          name: '{{- include "janus-idp.postgresql.secretName" . }}'
    extraEnvVarsCM: []
    extraEnvVarsSecrets: []
    extraPorts: []
    extraVolumeMounts:
    - mountPath: /opt/app-root/src/dynamic-plugins-root
      name: dynamic-plugins-root
    - mountPath: /tmp
      name: temp
    extraVolumes:
    - ephemeral:
        volumeClaimTemplate:
          spec:
            accessModes:
            - ReadWriteOnce
            resources:
              requests:
                storage: 5Gi
      name: dynamic-plugins-root
    - configMap:
        defaultMode: 420
        name: '{{ printf "%s-dynamic-plugins" .Release.Name }}'
        optional: true
      name: dynamic-plugins
    - name: dynamic-plugins-npmrc
      secret:
        defaultMode: 420
        optional: true
        secretName: '{{ printf "%s-dynamic-plugins-npmrc" .Release.Name }}'
    - name: dynamic-plugins-registry-auth
      secret:
        defaultMode: 416
        optional: true
        secretName: '{{ printf "%s-dynamic-plugins-registry-auth" .Release.Name }}'
    - emptyDir: {}
      name: npmcacache
    - emptyDir: {}
      name: temp
    hostAliases: []
    image:
      digest: ""
      pullPolicy: Always
      pullSecrets: []
      registry: quay.io
      repository: rhdh/rhdh-hub-rhel9
      tag: latest
    initContainers:
    - command:
      - ./install-dynamic-plugins.sh
      - /dynamic-plugins-root
      env:
      - name: NPM_CONFIG_USERCONFIG
        value: /opt/app-root/src/.npmrc.dynamic-plugins
      - name: MAX_ENTRY_SIZE
        value: "30000000"
      image: '{{ include "backstage.image" . }}'
      imagePullPolicy: Always
      name: install-dynamic-plugins
      resources:
        limits:
          cpu: 1000m
          ephemeral-storage: 5Gi
          memory: 2.5Gi
        requests:
          cpu: 250m
          memory: 256Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      volumeMounts:
      - mountPath: /dynamic-plugins-root
        name: dynamic-plugins-root
      - mountPath: /opt/app-root/src/dynamic-plugins.yaml
        name: dynamic-plugins
        readOnly: true
        subPath: dynamic-plugins.yaml
      - mountPath: /opt/app-root/src/.npmrc.dynamic-plugins
        name: dynamic-plugins-npmrc
        readOnly: true
        subPath: .npmrc
      - mountPath: /opt/app-root/src/.config/containers
        name: dynamic-plugins-registry-auth
        readOnly: true
      - mountPath: /opt/app-root/src/.npm/_cacache
        name: npmcacache
      - mountPath: /tmp
        name: temp
      workingDir: /opt/app-root/src
    installDir: /opt/app-root/src
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /.backstage/health/v1/liveness
        port: backend
        scheme: HTTP
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 4
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: ""
    podAnnotations:
      checksum/dynamic-plugins: '{{- include "common.tplvalues.render" ( dict "value"
        .Values.global.dynamic "context" $) | sha256sum }}'
    podLabels: {}
    podSecurityContext: {}
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /.backstage/health/v1/readiness
        port: backend
        scheme: HTTP
      periodSeconds: 10
      successThreshold: 2
      timeoutSeconds: 4
    replicas: 1
    resources:
      limits:
        cpu: 1000m
        ephemeral-storage: 5Gi
        memory: 2.5Gi
      requests:
        cpu: 250m
        memory: 1Gi
    revisionHistoryLimit: 10
    startupProbe:
      failureThreshold: 3
      httpGet:
        path: /.backstage/health/v1/liveness
        port: backend
        scheme: HTTP
      initialDelaySeconds: 30
      periodSeconds: 20
      successThreshold: 1
      timeoutSeconds: 4
    tolerations: []
    topologySpreadConstraints: []
  clusterDomain: cluster.local
  common:
    exampleValue: common-chart
    global:
      auth:
        backend:
          enabled: true
          existingSecret: ""
          value: ""
      clusterRouterBase: apps.example.com
      dynamic:
        includes:
        - dynamic-plugins.default.yaml
        plugins: []
      host: ""
      imagePullSecrets: []
      imageRegistry: ""
  commonAnnotations: {}
  commonLabels: {}
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  extraDeploy: []
  fullnameOverride: ""
  global:
    auth:
      backend:
        enabled: true
        existingSecret: ""
        value: ""
    clusterRouterBase: apps.example.com
    dynamic:
      includes:
      - dynamic-plugins.default.yaml
      plugins: []
    host: ""
    imagePullSecrets: []
    imageRegistry: ""
  ingress:
    annotations: {}
    className: ""
    enabled: false
    extraHosts: []
    extraTls: []
    host: '{{ .Values.global.host }}'
    path: /
    tls:
      enabled: false
      secretName: ""
  kubeVersion: ""
  metrics:
    serviceMonitor:
      annotations: {}
      enabled: false
      interval: null
      labels: {}
      path: /metrics
      port: http-metrics
  nameOverride: developer-hub
  networkPolicy:
    egressRules:
      customRules: []
      denyConnectionsToExternal: false
    enabled: false
    ingressRules:
      customRules: []
      namespaceSelector: {}
      podSelector: {}
  postgresql:
    architecture: standalone
    auth:
      existingSecret: ""
      password: ""
      secretKeys:
        adminPasswordKey: postgres-password
        replicationPasswordKey: replication-password
        userPasswordKey: password
      username: bn_backstage
    enabled: false
    image:
      registry: quay.io
      repository: fedora/postgresql-15
      tag: latest
    postgresqlDataDir: /var/lib/pgsql/data/userdata
    primary:
      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        enabled: false
      extraEnvVars:
      - name: POSTGRESQL_ADMIN_PASSWORD
        valueFrom:
          secretKeyRef:
            key: postgres-password
            name: '{{- include "postgresql.v1.secretName" . }}'
      persistence:
        enabled: true
        mountPath: /var/lib/pgsql/data
        size: 1Gi
      podSecurityContext:
        enabled: false
      resources:
        limits:
          cpu: 250m
          ephemeral-storage: 20Mi
          memory: 1024Mi
        requests:
          cpu: 250m
          memory: 256Mi
    serviceBindings:
      enabled: true
  service:
    annotations: {}
    clusterIP: ""
    externalTrafficPolicy: Cluster
    extraPorts:
    - name: http-metrics
      port: 9464
      targetPort: 9464
    ipFamilies: []
    ipFamilyPolicy: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePorts:
      backend: ""
    ports:
      backend: 7007
      name: http-backend
      targetPort: backend
    sessionAffinity: None
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    labels: {}
    name: ""
