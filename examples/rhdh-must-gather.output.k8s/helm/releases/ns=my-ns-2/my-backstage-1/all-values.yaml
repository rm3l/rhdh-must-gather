COMPUTED VALUES:
common:
  exampleValue: common-chart
  global:
    auth:
      backend:
        enabled: true
        existingSecret: ""
        value: ""
    clusterRouterBase: apps.example.com
    dynamic:
      includes:
      - dynamic-plugins.default.yaml
      plugins: []
    host: ""
global:
  auth:
    backend:
      enabled: true
      existingSecret: ""
      value: ""
  clusterRouterBase: apps.example.com
  dynamic:
    includes:
    - dynamic-plugins.default.yaml
    plugins: []
  host: my-backstage-1.127.0.0.1.sslip.io
nameOverride: developer-hub
orchestrator:
  enabled: false
  plugins:
  - disabled: false
    integrity: sha512-Kr55YbuVwEADwGef9o9wyimcgHmiwehPeAtVHa9g2RQYoSPEa6BeOlaPzB6W5Ke3M2bN/0j0XXtpLuvrlXQogA==
    package: https://npm.registry.redhat.com/@redhat/backstage-plugin-orchestrator-backend-dynamic/-/backstage-plugin-orchestrator-backend-dynamic-1.6.0.tgz
    pluginConfig:
      orchestrator:
        dataIndexService:
          url: http://sonataflow-platform-data-index-service.{{ .Release.Namespace
            }}
  - disabled: false
    integrity: sha512-fOSJv2PgtD2urKwBM7p9W6gV/0UIHSf4pkZ9V/wQO0eg0Zi5Mys/CL1ba3nO9x9l84MX11UBZ2r7PPVJPrmOtw==
    package: https://npm.registry.redhat.com/@redhat/backstage-plugin-orchestrator/-/backstage-plugin-orchestrator-1.6.0.tgz
    pluginConfig:
      dynamicPlugins:
        frontend:
          red-hat-developer-hub.backstage-plugin-orchestrator:
            appIcons:
            - importName: OrchestratorIcon
              name: orchestratorIcon
            dynamicRoutes:
            - importName: OrchestratorPage
              menuItem:
                icon: orchestratorIcon
                text: Orchestrator
              path: /orchestrator
  - disabled: false
    integrity: sha512-Bueeix4661fXEnfJ9y31Yw91LXJgw6hJUG7lPVdESCi9VwBCjDB9Rm8u2yPqP8sriwr0OMtKtqD+Odn3LOPyVw==
    package: https://npm.registry.redhat.com/@redhat/backstage-plugin-scaffolder-backend-module-orchestrator-dynamic/-/backstage-plugin-scaffolder-backend-module-orchestrator-dynamic-1.6.0.tgz
    pluginConfig:
      orchestrator:
        dataIndexService:
          url: http://sonataflow-platform-data-index-service.{{ .Release.Namespace
            }}
  - disabled: false
    integrity: sha512-Tqn6HO21Q1TQ7TFUoRhwBVCtSBzbQYz+OaanzzIB0R24O6YtVx3wR7Chtr5TzC05Vz5GkBO1+FZid8BKpqljgA==
    package: https://npm.registry.redhat.com/@redhat/backstage-plugin-orchestrator-form-widgets/-/backstage-plugin-orchestrator-form-widgets-1.6.0.tgz
    pluginConfig:
      dynamicPlugins:
        frontend:
          red-hat-developer-hub.backstage-plugin-orchestrator-form-widgets: {}
  serverlessLogicOperator:
    enabled: true
  serverlessOperator:
    enabled: true
  sonataflowPlatform:
    createDBJobImage: '{{ .Values.upstream.postgresql.image.registry }}/{{ .Values.upstream.postgresql.image.repository
      }}:{{ .Values.upstream.postgresql.image.tag }}'
    dataIndexImage: ""
    eventing:
      broker:
        name: ""
        namespace: ""
    externalDBHost: ""
    externalDBName: ""
    externalDBPort: ""
    externalDBsecretRef: ""
    initContainerImage: '{{ .Values.upstream.postgresql.image.registry }}/{{ .Values.upstream.postgresql.image.repository
      }}:{{ .Values.upstream.postgresql.image.tag }}'
    jobServiceImage: ""
    monitoring:
      enabled: true
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 64Mi
route:
  annotations: {}
  enabled: false
  host: '{{ .Values.global.host }}'
  path: /
  tls:
    caCertificate: ""
    certificate: ""
    destinationCACertificate: ""
    enabled: true
    insecureEdgeTerminationPolicy: Redirect
    key: ""
    termination: edge
  wildcardPolicy: None
test:
  enabled: true
  image:
    registry: quay.io
    repository: curl/curl
    tag: latest
  injectTestNpmrcSecret: false
upstream:
  backstage:
    affinity: {}
    annotations: {}
    appConfig:
      app:
        baseUrl: https://{{- include "janus-idp.hostname" . }}
      auth:
        providers: {}
      backend:
        auth:
          externalAccess:
          - options:
              secret: ${BACKEND_SECRET}
              subject: legacy-default-config
            type: legacy
        baseUrl: https://{{- include "janus-idp.hostname" . }}
        cors:
          origin: https://{{- include "janus-idp.hostname" . }}
        database:
          connection:
            password: ${POSTGRESQL_ADMIN_PASSWORD}
            user: postgres
    args:
    - --config
    - dynamic-plugins-root/app-config.dynamic-plugins.yaml
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    command: []
    containerPorts:
      backend: 7007
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    extraAppConfig: []
    extraContainers: []
    extraEnvVars:
    - name: BACKEND_SECRET
      valueFrom:
        secretKeyRef:
          key: backend-secret
          name: '{{ include "janus-idp.backend-secret-name" $ }}'
    - name: POSTGRESQL_ADMIN_PASSWORD
      valueFrom:
        secretKeyRef:
          key: postgres-password
          name: '{{- include "janus-idp.postgresql.secretName" . }}'
    extraEnvVarsCM: []
    extraEnvVarsSecrets: []
    extraPorts: []
    extraVolumeMounts:
    - mountPath: /opt/app-root/src/dynamic-plugins-root
      name: dynamic-plugins-root
    - mountPath: /tmp
      name: temp
    extraVolumes:
    - ephemeral:
        volumeClaimTemplate:
          spec:
            accessModes:
            - ReadWriteOnce
            resources:
              requests:
                storage: 5Gi
      name: dynamic-plugins-root
    - configMap:
        defaultMode: 420
        name: '{{ printf "%s-dynamic-plugins" .Release.Name }}'
        optional: true
      name: dynamic-plugins
    - name: dynamic-plugins-npmrc
      secret:
        defaultMode: 420
        optional: true
        secretName: '{{ printf "%s-dynamic-plugins-npmrc" .Release.Name }}'
    - name: dynamic-plugins-registry-auth
      secret:
        defaultMode: 416
        optional: true
        secretName: '{{ printf "%s-dynamic-plugins-registry-auth" .Release.Name }}'
    - emptyDir: {}
      name: npmcacache
    - emptyDir: {}
      name: temp
    hostAliases: []
    image:
      digest: ""
      pullPolicy: Always
      pullSecrets: []
      registry: quay.io
      repository: rhdh/rhdh-hub-rhel9
      tag: latest
    initContainers:
    - command:
      - ./install-dynamic-plugins.sh
      - /dynamic-plugins-root
      env:
      - name: NPM_CONFIG_USERCONFIG
        value: /opt/app-root/src/.npmrc.dynamic-plugins
      - name: MAX_ENTRY_SIZE
        value: "30000000"
      image: '{{ include "backstage.image" . }}'
      imagePullPolicy: Always
      name: install-dynamic-plugins
      resources:
        limits:
          cpu: 1000m
          ephemeral-storage: 5Gi
          memory: 2.5Gi
        requests:
          cpu: 250m
          memory: 256Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      volumeMounts:
      - mountPath: /dynamic-plugins-root
        name: dynamic-plugins-root
      - mountPath: /opt/app-root/src/dynamic-plugins.yaml
        name: dynamic-plugins
        readOnly: true
        subPath: dynamic-plugins.yaml
      - mountPath: /opt/app-root/src/.npmrc.dynamic-plugins
        name: dynamic-plugins-npmrc
        readOnly: true
        subPath: .npmrc
      - mountPath: /opt/app-root/src/.config/containers
        name: dynamic-plugins-registry-auth
        readOnly: true
      - mountPath: /opt/app-root/src/.npm/_cacache
        name: npmcacache
      - mountPath: /tmp
        name: temp
      workingDir: /opt/app-root/src
    installDir: /opt/app-root/src
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /.backstage/health/v1/liveness
        port: backend
        scheme: HTTP
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 4
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: ""
    podAnnotations:
      checksum/dynamic-plugins: '{{- include "common.tplvalues.render" ( dict "value"
        .Values.global.dynamic "context" $) | sha256sum }}'
    podLabels: {}
    podSecurityContext: {}
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /.backstage/health/v1/readiness
        port: backend
        scheme: HTTP
      periodSeconds: 10
      successThreshold: 2
      timeoutSeconds: 4
    replicas: 1
    resources:
      limits:
        cpu: 1000m
        ephemeral-storage: 5Gi
        memory: 2.5Gi
      requests:
        cpu: 250m
        memory: 1Gi
    revisionHistoryLimit: 10
    startupProbe:
      failureThreshold: 3
      httpGet:
        path: /.backstage/health/v1/liveness
        port: backend
        scheme: HTTP
      initialDelaySeconds: 30
      periodSeconds: 20
      successThreshold: 1
      timeoutSeconds: 4
    tolerations: []
    topologySpreadConstraints: []
  clusterDomain: cluster.local
  common:
    exampleValue: common-chart
    global:
      auth:
        backend:
          enabled: true
          existingSecret: ""
          value: ""
      clusterRouterBase: apps.example.com
      dynamic:
        includes:
        - dynamic-plugins.default.yaml
        plugins: []
      host: ""
      imagePullSecrets: []
      imageRegistry: ""
  commonAnnotations: {}
  commonLabels: {}
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  extraDeploy: []
  fullnameOverride: ""
  global:
    auth:
      backend:
        enabled: true
        existingSecret: ""
        value: ""
    clusterRouterBase: apps.example.com
    dynamic:
      includes:
      - dynamic-plugins.default.yaml
      plugins: []
    host: ""
    imagePullSecrets: []
    imageRegistry: ""
  ingress:
    annotations: {}
    className: ""
    enabled: true
    extraHosts: []
    extraTls: []
    host: '{{ .Values.global.host }}'
    path: /
    tls:
      enabled: false
      secretName: ""
  kubeVersion: ""
  metrics:
    serviceMonitor:
      annotations: {}
      enabled: false
      interval: null
      labels: {}
      path: /metrics
      port: http-metrics
  nameOverride: developer-hub
  networkPolicy:
    egressRules:
      customRules: []
      denyConnectionsToExternal: false
    enabled: false
    ingressRules:
      customRules: []
      namespaceSelector: {}
      podSelector: {}
  postgresql:
    architecture: standalone
    audit:
      clientMinMessages: error
      logConnections: false
      logDisconnections: false
      logHostname: false
      logLinePrefix: ""
      logTimezone: ""
      pgAuditLog: ""
      pgAuditLogCatalog: "off"
    auth:
      database: ""
      enablePostgresUser: true
      existingSecret: ""
      password: ""
      postgresPassword: ""
      replicationPassword: ""
      replicationUsername: repl_user
      secretKeys:
        adminPasswordKey: postgres-password
        replicationPasswordKey: replication-password
        userPasswordKey: password
      usePasswordFiles: false
      username: bn_backstage
    backup:
      cronjob:
        annotations: {}
        command:
        - /bin/sh
        - -c
        - pg_dumpall --clean --if-exists --load-via-partition-root --quote-all-identifiers
          --no-password --file=${PGDUMP_DIR}/pg_dumpall-$(date '+%Y-%m-%d-%H-%M').pgdump
        concurrencyPolicy: Allow
        containerSecurityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 0
          runAsNonRoot: true
          runAsUser: 1001
          seccompProfile:
            type: RuntimeDefault
        failedJobsHistoryLimit: 1
        labels: {}
        restartPolicy: OnFailure
        schedule: '@daily'
        startingDeadlineSeconds: ""
        storage:
          accessModes:
          - ReadWriteOnce
          annotations: {}
          existingClaim: ""
          mountPath: /backup/pgdump
          resourcePolicy: ""
          size: 8Gi
          storageClass: ""
          subPath: ""
          volumeClaimTemplates:
            selector: {}
        successfulJobsHistoryLimit: 3
        ttlSecondsAfterFinished: ""
      enabled: false
    clusterDomain: cluster.local
    common:
      exampleValue: common-chart
      global:
        auth:
          backend:
            enabled: true
            existingSecret: ""
            value: ""
        clusterRouterBase: apps.example.com
        dynamic:
          includes:
          - dynamic-plugins.default.yaml
          plugins: []
        host: ""
        imagePullSecrets: []
        imageRegistry: ""
        postgresql:
          auth:
            database: ""
            existingSecret: ""
            password: ""
            postgresPassword: ""
            secretKeys:
              adminPasswordKey: ""
              replicationPasswordKey: ""
              userPasswordKey: ""
            username: ""
          service:
            ports:
              postgresql: ""
        storageClass: ""
    commonAnnotations: {}
    commonLabels: {}
    containerPorts:
      postgresql: 5432
    diagnosticMode:
      args:
      - infinity
      command:
      - sleep
      enabled: false
    enabled: true
    extraDeploy: []
    fullnameOverride: ""
    global:
      auth:
        backend:
          enabled: true
          existingSecret: ""
          value: ""
      clusterRouterBase: apps.example.com
      dynamic:
        includes:
        - dynamic-plugins.default.yaml
        plugins: []
      host: ""
      imagePullSecrets: []
      imageRegistry: ""
      postgresql:
        auth:
          database: ""
          existingSecret: ""
          password: ""
          postgresPassword: ""
          secretKeys:
            adminPasswordKey: ""
            replicationPasswordKey: ""
            userPasswordKey: ""
          username: ""
        service:
          ports:
            postgresql: ""
      storageClass: ""
    image:
      debug: false
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: quay.io
      repository: fedora/postgresql-15
      tag: latest
    kubeVersion: ""
    ldap:
      basedn: ""
      binddn: ""
      bindpw: ""
      enabled: false
      port: ""
      prefix: ""
      scheme: ""
      searchAttribute: ""
      searchFilter: ""
      server: ""
      suffix: ""
      tls:
        enabled: false
      uri: ""
    metrics:
      containerPorts:
        metrics: 9187
      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        enabled: true
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 1001
        seccompProfile:
          type: RuntimeDefault
      customLivenessProbe: {}
      customMetrics: {}
      customReadinessProbe: {}
      customStartupProbe: {}
      enabled: false
      extraEnvVars: []
      image:
        digest: ""
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/postgres-exporter
        tag: 0.13.2-debian-11-r25
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      prometheusRule:
        enabled: false
        labels: {}
        namespace: ""
        rules: []
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        limits: {}
        requests: {}
      service:
        annotations:
          prometheus.io/port: '{{ .Values.metrics.service.ports.metrics }}'
          prometheus.io/scrape: "true"
        clusterIP: ""
        ports:
          metrics: 9187
        sessionAffinity: None
      serviceMonitor:
        enabled: false
        honorLabels: false
        interval: ""
        jobLabel: ""
        labels: {}
        metricRelabelings: []
        namespace: ""
        relabelings: []
        scrapeTimeout: ""
        selector: {}
      startupProbe:
        enabled: false
        failureThreshold: 15
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
    nameOverride: ""
    networkPolicy:
      egressRules:
        customRules: []
        denyConnectionsToExternal: false
      enabled: false
      ingressRules:
        primaryAccessOnlyFrom:
          customRules: []
          enabled: false
          namespaceSelector: {}
          podSelector: {}
        readReplicasAccessOnlyFrom:
          customRules: []
          enabled: false
          namespaceSelector: {}
          podSelector: {}
      metrics:
        enabled: false
        namespaceSelector: {}
        podSelector: {}
    postgresqlDataDir: /var/lib/pgsql/data/userdata
    postgresqlSharedPreloadLibraries: pgaudit
    primary:
      affinity: {}
      annotations: {}
      args: []
      command: []
      configuration: ""
      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        enabled: false
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 1001
        seccompProfile:
          type: RuntimeDefault
      customLivenessProbe: {}
      customReadinessProbe: {}
      customStartupProbe: {}
      existingConfigmap: ""
      existingExtendedConfigmap: ""
      extendedConfiguration: ""
      extraEnvVars:
      - name: POSTGRESQL_ADMIN_PASSWORD
        valueFrom:
          secretKeyRef:
            key: postgres-password
            name: '{{- include "postgresql.v1.secretName" . }}'
      extraEnvVarsCM: ""
      extraEnvVarsSecret: ""
      extraPodSpec: {}
      extraVolumeMounts: []
      extraVolumes: []
      hostAliases: []
      hostIPC: false
      hostNetwork: false
      initContainers: []
      initdb:
        args: ""
        password: ""
        postgresqlWalDir: ""
        scripts: {}
        scriptsConfigMap: ""
        scriptsSecret: ""
        user: ""
      labels: {}
      lifecycleHooks: {}
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: primary
      nodeAffinityPreset:
        key: ""
        type: ""
        values: []
      nodeSelector: {}
      persistence:
        accessModes:
        - ReadWriteOnce
        annotations: {}
        dataSource: {}
        enabled: true
        existingClaim: ""
        labels: {}
        mountPath: /var/lib/pgsql/data
        selector: {}
        size: 1Gi
        storageClass: ""
        subPath: ""
      persistentVolumeClaimRetentionPolicy:
        enabled: false
        whenDeleted: Retain
        whenScaled: Retain
      pgHbaConfiguration: ""
      podAffinityPreset: ""
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      podSecurityContext:
        enabled: false
        fsGroup: 1001
      priorityClassName: ""
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        limits:
          cpu: 250m
          ephemeral-storage: 20Mi
          memory: 1024Mi
        requests:
          cpu: 250m
          memory: 256Mi
      schedulerName: ""
      service:
        annotations: {}
        clusterIP: ""
        externalTrafficPolicy: Cluster
        extraPorts: []
        headless:
          annotations: {}
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        nodePorts:
          postgresql: ""
        ports:
          postgresql: 5432
        sessionAffinity: None
        sessionAffinityConfig: {}
        type: ClusterIP
      sidecars: []
      standby:
        enabled: false
        primaryHost: ""
        primaryPort: ""
      startupProbe:
        enabled: false
        failureThreshold: 15
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      terminationGracePeriodSeconds: ""
      tolerations: []
      topologySpreadConstraints: []
      updateStrategy:
        rollingUpdate: {}
        type: RollingUpdate
    psp:
      create: false
    rbac:
      create: false
      rules: []
    readReplicas:
      affinity: {}
      annotations: {}
      args: []
      command: []
      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        enabled: true
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 1001
        seccompProfile:
          type: RuntimeDefault
      customLivenessProbe: {}
      customReadinessProbe: {}
      customStartupProbe: {}
      extendedConfiguration: ""
      extraEnvVars: []
      extraEnvVarsCM: ""
      extraEnvVarsSecret: ""
      extraPodSpec: {}
      extraVolumeMounts: []
      extraVolumes: []
      hostAliases: []
      hostIPC: false
      hostNetwork: false
      initContainers: []
      labels: {}
      lifecycleHooks: {}
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: read
      nodeAffinityPreset:
        key: ""
        type: ""
        values: []
      nodeSelector: {}
      persistence:
        accessModes:
        - ReadWriteOnce
        annotations: {}
        dataSource: {}
        enabled: true
        existingClaim: ""
        labels: {}
        mountPath: /bitnami/postgresql
        selector: {}
        size: 8Gi
        storageClass: ""
        subPath: ""
      persistentVolumeClaimRetentionPolicy:
        enabled: false
        whenDeleted: Retain
        whenScaled: Retain
      podAffinityPreset: ""
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      podSecurityContext:
        enabled: true
        fsGroup: 1001
      priorityClassName: ""
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      replicaCount: 1
      resources:
        limits: {}
        requests:
          cpu: 250m
          memory: 256Mi
      schedulerName: ""
      service:
        annotations: {}
        clusterIP: ""
        externalTrafficPolicy: Cluster
        extraPorts: []
        headless:
          annotations: {}
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        nodePorts:
          postgresql: ""
        ports:
          postgresql: 5432
        sessionAffinity: None
        sessionAffinityConfig: {}
        type: ClusterIP
      sidecars: []
      startupProbe:
        enabled: false
        failureThreshold: 15
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      terminationGracePeriodSeconds: ""
      tolerations: []
      topologySpreadConstraints: []
      updateStrategy:
        rollingUpdate: {}
        type: RollingUpdate
    replication:
      applicationName: my_application
      numSynchronousReplicas: 0
      synchronousCommit: "off"
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: true
      create: false
      name: ""
    serviceBindings:
      enabled: true
    shmVolume:
      enabled: true
      sizeLimit: ""
    tls:
      autoGenerated: false
      certCAFilename: ""
      certFilename: ""
      certKeyFilename: ""
      certificatesSecret: ""
      crlFilename: ""
      enabled: false
      preferServerCiphers: true
    volumePermissions:
      containerSecurityContext:
        runAsGroup: 0
        runAsNonRoot: false
        runAsUser: 0
        seccompProfile:
          type: RuntimeDefault
      enabled: false
      image:
        digest: ""
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/os-shell
        tag: 11-debian-11-r43
      resources:
        limits: {}
        requests: {}
  service:
    annotations: {}
    clusterIP: ""
    externalTrafficPolicy: Cluster
    extraPorts:
    - name: http-metrics
      port: 9464
      targetPort: 9464
    ipFamilies: []
    ipFamilyPolicy: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePorts:
      backend: ""
    ports:
      backend: 7007
      name: http-backend
      targetPort: backend
    sessionAffinity: None
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    labels: {}
    name: ""
