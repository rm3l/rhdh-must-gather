#!/usr/bin/env bash

# RHDH Must-Gather Tool - Main Orchestrator
# Collects diagnostic information for Red Hat Developer Hub troubleshooting
# Supports both OpenShift and standard Kubernetes clusters
# Handles both Helm and Operator deployments

set -euo pipefail

export BASE_COLLECTION_PATH="${BASE_COLLECTION_PATH:-/must-gather}"
#export PROS=${PROS:-5}

# Get script directory for calling other scripts
DIR_NAME=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

source "${DIR_NAME}/common.sh"

export_log_collection_args

# generate /version file
source "${DIR_NAME}/version"
echo "rhdh/must-gather" > "${BASE_COLLECTION_PATH}/version"
version >> "${BASE_COLLECTION_PATH}/version"

trap "echo 'done with data collection. Now sanitizing data...' && '${DIR_NAME}'/sanitize '${BASE_COLLECTION_PATH}' || true" EXIT
trap 'log "An unexpected error occurred. See logs above."' ERR

function main() {
  log_info "Starting RHDH must-gather collection..."
  log_info "Output directory: $BASE_COLLECTION_PATH"
  log_info "Log level: $LOG_LEVEL"

  # Initialize must-gather environment
  if ! init_must_gather; then
      log_error "Failed to initialize must-gather environment"
      exit 1
  fi

  declare mandatory_scripts=(
    "platform"
    "helm"
    "operator"
    "route"
    "ingress"
  )
  declare requested_scripts=("${mandatory_scripts[@]}")
  declare excluded_scripts=()
  declare target_namespaces=""

  parse_flags "$@"
  run_scripts
  run_logs

  sync
  exit 0
}

function parse_flags {
  while :; do
    case ${1:-} in
      --help|-h)
        help
        exit 0
        ;;
      --cluster-info)
        requested_scripts+=("cluster-info")
        ;;
      --without-operator)
        excluded_scripts+=("operator")
        ;;
      --without-helm)
        excluded_scripts+=("helm")
        ;;
      --without-platform)
        excluded_scripts+=("platform")
        ;;
      --without-route)
        excluded_scripts+=("route")
        ;;
      --without-ingress)
        excluded_scripts+=("ingress")
        ;;
      --namespaces)
        if [[ -n "${2:-}" ]]; then
          target_namespaces="$2"
          shift
        else
          log_error "--namespaces requires a comma-separated list of namespaces"
          exit 1
        fi
        ;;
      --namespaces=*)
        target_namespaces="${1#*=}"
        ;;
      --)
        shift
        break
        ;;
      -?*)
        printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
        ;;
      *) # Default case: No more options, so break out of the loop.
        break
    esac
    shift
  done

  # Remove excluded scripts from the requested scripts
  for excluded in "${excluded_scripts[@]}"; do
    for i in "${!requested_scripts[@]}"; do
      if [[ "${requested_scripts[i]}" == "$excluded" ]]; then
        unset 'requested_scripts[i]'
      fi
    done
  done
  # Rebuild array to remove gaps
  requested_scripts=("${requested_scripts[@]}")

  # Export namespace filtering for use by collection scripts
  if [[ -n "$target_namespaces" ]]; then
    export RHDH_TARGET_NAMESPACES="$target_namespaces"
    log_info "Limiting collection to namespaces: $target_namespaces"
  fi
}

function help {
    echo "\
Usage: oc adm must-gather --image=ghcr.io/rm3l/rhdh-must-gather -- /usr/bin/gather [params...]

  A client tool for gathering RHDH information from Helm and Operator installations in an OpenShift or Kubernetes cluster

  Available options:

  > To see this help menu and exit, use:
  --help

  > By default, the tool collects RHDH-specific information including:"
    for collector in "${mandatory_scripts[@]}" ; do
    echo "  > - $collector"
    done
    echo "\

  > You can exclude specific data collection types:
  --without-operator      Skip operator-based RHDH deployment data collection
  --without-helm          Skip Helm-based RHDH deployment data collection  
  --without-platform      Skip platform detection and information
  --without-route         Skip OpenShift route collection
  --without-ingress       Skip Kubernetes ingress collection

  > You can also choose to enable optional collectors:
  --cluster-info          Collect cluster-wide diagnostic information

  > You can limit collection to specific namespaces:
  --namespaces ns1,ns2    Collect data only from specified comma-separated namespaces

  Examples:
  # Collect only Helm data (skip operator data)
  oc adm must-gather --image=ghcr.io/rm3l/rhdh-must-gather -- /usr/bin/gather --without-operator

  # Collect only operator data (skip Helm data)  
  oc adm must-gather --image=ghcr.io/rm3l/rhdh-must-gather -- /usr/bin/gather --without-helm

  # Minimal collection (only platform info)
  oc adm must-gather --image=ghcr.io/rm3l/rhdh-must-gather -- /usr/bin/gather --without-operator --without-helm --without-route --without-ingress

  # Collect from specific namespaces only
  oc adm must-gather --image=ghcr.io/rm3l/rhdh-must-gather -- /usr/bin/gather --namespaces rhdh-prod,rhdh-staging

  # Combine namespace filtering with exclusions
  oc adm must-gather --image=ghcr.io/rm3l/rhdh-must-gather -- /usr/bin/gather --namespaces my-rhdh-ns --without-operator
"
}

function run_scripts {
  log_info "running the following scripts: ${requested_scripts[*]}"
  for script in "${requested_scripts[@]}";
  do
    script_name="gather_${script}"
    log_info "running ${script_name}"
    eval USR_BIN_GATHER=1 "${DIR_NAME}/${script_name}"
  done
}

function run_logs {
  log_info "running logs"
  USR_BIN_GATHER=1 "${DIR_NAME}"/logs.sh
}

main "$@"
# set +x
