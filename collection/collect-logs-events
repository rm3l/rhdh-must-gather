#!/bin/bash

# RHDH Logs and Events Collection Script
# Collects logs and events specifically related to RHDH deployments

set -euo pipefail

# Source utilities
source "$(dirname "$0")/lib/utils.sh"

collect_rhdh_events() {
    log_info "Collecting RHDH-related events..."
    
    local events_dir="$MUST_GATHER_DIR/events"
    ensure_directory "$events_dir"
    
    # Get time constraint filter for events
    local time_filter
    time_filter=$(get_kubectl_events_time_filter)
    
    local base_selector=""
    if [[ -n "$time_filter" ]]; then
        base_selector="--field-selector $time_filter"
        log_info "Applying time constraints to event collection: $time_filter"
    fi
    
    # Load RHDH namespaces
    load_detection_results
    local rhdh_namespaces
    if [[ -f "$MUST_GATHER_DIR/rhdh-instances.env" ]]; then
        rhdh_namespaces=$(grep -v '^#' "$MUST_GATHER_DIR/rhdh-instances.env" | cut -d':' -f1 | sort -u)
    fi
    
    if [[ -z "$rhdh_namespaces" ]]; then
        log_warn "No RHDH namespaces detected, skipping event collection"
        return 0
    fi
    
    # Collect events from each RHDH namespace
    for namespace in $rhdh_namespaces; do
        log_info "Collecting events from RHDH namespace: $namespace"
        safe_exec "kubectl get events -n '$namespace' $base_selector --sort-by='.lastTimestamp'" "$events_dir/events-$namespace.txt" "Events from namespace $namespace"
        safe_exec "kubectl get events -n '$namespace' $base_selector --sort-by='.lastTimestamp' -o yaml" "$events_dir/events-$namespace.yaml" "Events from namespace $namespace (YAML)"
    done
    
    # Combined RHDH events
    safe_exec "kubectl get events --all-namespaces $base_selector --sort-by='.lastTimestamp' | grep -E \"$(echo "$rhdh_namespaces" | tr '\n' '|' | sed 's/|$//')\"" "$events_dir/rhdh-events.txt" "All RHDH-related events" || true
    
    # Filter RHDH events by type across all RHDH namespaces
    log_info "Collecting RHDH events by type..."
    for namespace in $rhdh_namespaces; do
        local warning_selector="type=Warning"
        local error_selector="type=Error"
        
        if [[ -n "$time_filter" ]]; then
            warning_selector="$warning_selector,$time_filter"
            error_selector="$error_selector,$time_filter"
        fi
        
        safe_exec "kubectl get events -n '$namespace' --field-selector \"$warning_selector\" --sort-by='.lastTimestamp'" "$events_dir/warning-events-$namespace.txt" "Warning events from $namespace" || true
        safe_exec "kubectl get events -n '$namespace' --field-selector \"$error_selector\" --sort-by='.lastTimestamp'" "$events_dir/error-events-$namespace.txt" "Error events from $namespace" || true
    done
}

collect_pod_logs() {
    local namespace="$1"
    
    if [[ -z "$namespace" ]]; then
        log_debug "No RHDH namespace provided, skipping pod logs collection"
        return 0
    fi
    
    log_info "Collecting pod logs from namespace: $namespace"
    
    # Get time constraint arguments for kubectl logs
    local since_args
    since_args=$(get_kubectl_logs_since_args)
    
    local logs_dir="$MUST_GATHER_DIR/logs"
    local namespace_logs_dir="$logs_dir/$namespace"
    ensure_directory "$namespace_logs_dir"
    
    # Get all pods in the namespace
    local pods
    pods=$(kubectl get pods -n "$namespace" -o name 2>/dev/null || echo "")
    
    if [[ -z "$pods" ]]; then
        log_warn "No pods found in namespace: $namespace"
        return 0
    fi
    
    for pod in $pods; do
        if [[ -n "$pod" ]]; then
            local pod_name=$(basename "$pod")
            local pod_logs_dir="$namespace_logs_dir/$pod_name"
            ensure_directory "$pod_logs_dir"
            
            log_debug "Collecting logs for pod: $pod_name"
            
            # Get container names
            local containers=$(kubectl get "$pod" -n "$namespace" -o jsonpath='{.spec.containers[*].name}' 2>/dev/null || echo "")
            
            if [[ -n "$containers" ]]; then
                # Multi-container pod
                for container in $containers; do
                    log_debug "Collecting logs for container: $container in pod: $pod_name"
                    
                    # Current logs
                    local base_cmd="kubectl logs '$pod' -n '$namespace'"
                    if [[ -n "$since_args" ]]; then
                        base_cmd="$base_cmd $since_args"
                    else
                        base_cmd="$base_cmd --tail=2000"
                    fi
                    
                    # Always specify container name to avoid ambiguity with init containers
                    safe_exec "$base_cmd -c '$container'" "$pod_logs_dir/${container}.log" "Current logs for container $container in $pod_name"
                    safe_exec "$base_cmd -c '$container' --previous" "$pod_logs_dir/${container}-previous.log" "Previous logs for container $container in $pod_name" || true
                done
            fi
            
            # Init container logs if any
            local init_containers=$(kubectl get "$pod" -n "$namespace" -o jsonpath='{.spec.initContainers[*].name}' 2>/dev/null || echo "")
            if [[ -n "$init_containers" ]]; then
                log_debug "Pod $pod_name has init containers, collecting init container logs"
                for init_container in $init_containers; do
                    local init_cmd="kubectl logs '$pod' -n '$namespace' -c '$init_container'"
                    if [[ -n "$since_args" ]]; then
                        init_cmd="$init_cmd $since_args"
                    fi
                    safe_exec "$init_cmd" "$pod_logs_dir/init-${init_container}.log" "Init container $init_container logs in $pod_name"
                done
            fi
        fi
    done
}

generate_logs_summary() {
    local namespace="${1:-}"
    
    log_info "Generating RHDH logs and events collection summary..."
    
    local logs_dir="$MUST_GATHER_DIR/logs"
    local events_dir="$MUST_GATHER_DIR/events"
    
    local total_log_files=$(find "$logs_dir" -name "*.log" -type f 2>/dev/null | wc -l || echo "0")
    local total_event_files=$(find "$events_dir" -name "*.txt" -o -name "*.yaml" -type f 2>/dev/null | wc -l || echo "0")
    
    local rhdh_pods_count=0
    if [[ -n "$namespace" ]]; then
        rhdh_pods_count=$(kubectl get pods -n "$namespace" --no-headers 2>/dev/null | wc -l || echo "0")
    fi
    
    cat > "$logs_dir/collection-summary.txt" << EOF
RHDH Logs and Events Collection Summary
======================================
Collection Date: $(date)
Collection Tool Version: 1.0.0

=== COLLECTION STATISTICS ===
Total Log Files: $total_log_files
Total Event Files: $total_event_files
RHDH Pods (primary namespace): $rhdh_pods_count

=== COLLECTED DATA ===
✓ RHDH Pod Logs:
  - Current container logs
  - Previous container logs (if available)
  - Init container logs (if any)
  - Multi-container pod support

✓ RHDH Events:
  - Events from all RHDH namespaces
  - Warning and error events
  - Events filtered by type

=== DATA ORGANIZATION ===
logs/
├── [namespace]/           # Per-namespace logs
│   └── [pod-name]/        # Per-pod logs
│       ├── [container].log           # Current logs
│       ├── [container]-previous.log  # Previous logs
│       └── init-[container].log      # Init container logs
└── collection-summary.txt # This summary

events/
├── events-[namespace].txt      # Events per namespace
├── events-[namespace].yaml     # Events per namespace (YAML)
├── warning-events-[namespace].txt # Warning events
├── error-events-[namespace].txt   # Error events
└── rhdh-events.txt             # All RHDH events combined

=== TIME CONSTRAINTS ===
$(if [[ -n "${SINCE:-}" ]]; then echo "Since: $SINCE"; elif [[ -n "${SINCE_TIME:-}" ]]; then echo "Since Time: $SINCE_TIME"; else echo "No time constraints applied"; fi)

=== NOTES ===
- This collection focuses only on RHDH-specific resources
- For cluster-wide diagnostics, combine with generic must-gather:
  oc adm must-gather
- Logs are collected with time constraints if specified
- Previous logs are included when available

For support or analysis of this data, please provide this
entire directory to your support team or engineers.
EOF

    log_success "Logs and events collection summary generated"
}

# Main execution
main() {
    log_info "Starting RHDH logs and events collection..."
    
    if ! check_cluster_connectivity; then
        log_error "Cannot connect to cluster"
        exit 1
    fi
    
    # Load detection results
    load_detection_results
    local namespace="${RHDH_NAMESPACE:-}"
    
    # Collect RHDH-related events (from all RHDH namespaces)
    collect_rhdh_events
    
    # Collect RHDH pod logs from all detected namespaces
    if [[ -f "$MUST_GATHER_DIR/rhdh-instances.env" ]]; then
        local rhdh_namespaces
        rhdh_namespaces=$(grep -v '^#' "$MUST_GATHER_DIR/rhdh-instances.env" | cut -d':' -f1 | sort -u)
        
        for rhdh_namespace in $rhdh_namespaces; do
            collect_pod_logs "$rhdh_namespace"
        done
    elif [[ -n "$namespace" ]]; then
        # Fallback to primary namespace if instances file doesn't exist
        collect_pod_logs "$namespace"
    else
        log_warn "No RHDH namespaces detected, skipping RHDH logs collection"
    fi
    
    # Generate summary
    generate_logs_summary "$namespace"
    
    log_success "RHDH logs and events collection completed"
}

# Show help
show_help() {
    cat << EOF
RHDH Logs and Events Collection Script

Usage: $0 [OPTIONS]

This script collects logs and events specifically related to RHDH deployments.

Options:
  -h, --help    Show this help message

Environment Variables:
  MUST_GATHER_DIR   Output directory (default: /must-gather)
  LOG_LEVEL         Logging level (default: INFO)
  SINCE            Relative time for log/event collection (e.g., "2h", "30m")
  SINCE_TIME       Absolute timestamp for log/event collection (RFC3339)

Collected Information:
  - RHDH-related events from all detected namespaces
  - RHDH pod logs (current and previous containers)
  - Events filtered by type (warning, error)
  - Init container logs for RHDH pods

Examples:
  $0                              # Standard collection
  SINCE=2h $0                     # Last 2 hours only
  SINCE_TIME=2025-08-21T20:00:00Z $0  # Since specific time
  LOG_LEVEL=DEBUG $0              # Debug mode

For more information about time constraints and filtering:
  https://kubernetes.io/docs/reference/kubectl/
EOF
}

# Handle command line arguments
case "${1:-}" in
    -h|--help)
        show_help
        exit 0
        ;;
    *)
        main "$@"
        ;;
esac