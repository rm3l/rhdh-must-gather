#!/usr/bin/env bash

# Helm Data Collection Script
# Collects Helm-specific information for RHDH deployments

set -euo pipefail

# Get script directory for calling other scripts
DIR_NAME=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
source "${DIR_NAME}/common.sh"
export_log_collection_args

log_info "Starting Helm data collection..."

helm_dir="$BASE_COLLECTION_PATH/helm"
ensure_directory "$helm_dir"

# Try to find releases with backstage/rhdh patterns in specified namespaces
namespace_args=$(get_namespace_args)
if [[ -n "${RHDH_TARGET_NAMESPACES:-}" ]]; then
    log_info "Searching for RHDH-related Helm releases in namespaces: $RHDH_TARGET_NAMESPACES..."
else
    log_info "Searching for RHDH-related Helm releases in all namespaces..."
fi

helm list $namespace_args | grep -E 'REVISION|backstage|rhdh|developer-hub' > "$helm_dir/all-rhdh-releases.txt"
helm list $namespace_args -o json | jq -r '.[] | select(.chart | test("backstage|rhdh|developer-hub"; "i"))' > "$helm_dir/all-rhdh-releases.json"

releases=$(jq -r '"\(.namespace)/\(.name)"' < "$helm_dir/all-rhdh-releases.json" || echo "")
release_namespaces=$(jq -r '"\(.namespace)"' < "$helm_dir/all-rhdh-releases.json" || echo "")
release_namespaces=$(echo "$release_namespaces" | sort | uniq)
rm -rf "$helm_dir/all-rhdh-releases.json"

if [[ -z "$releases" ]]; then
    log_warn "No RHDH-related Helm releases found" > "$helm_dir/no-releases.txt"
    exit 0
fi

log_debug "release_namespaces: $release_namespaces"
log_debug "releases: $releases"

# Process each release namespace
for release_ns in $release_namespaces; do
  # Skip this namespace if namespace filtering is enabled and it's not in the target list
  if ! should_include_namespace "$release_ns"; then
    log_debug "Skipping helm namespace $release_ns (not in target list)"
    continue
  fi

  log_info "--> Processing namespace $release_ns containing at least one Helm release"

  release_ns_dir="$helm_dir/releases/ns=$release_ns/"
  ensure_directory "$release_ns_dir"

  collect_namespace_data "$release_ns" "$release_ns_dir"
done

# Process each release
for release_info in $releases; do
    if [[ -z "$release_info" ]]; then
      continue
    fi

    release_ns=""
    release_name="$release_info"

    # Handle namespace/release format from all-namespaces search
    if [[ "$release_info" == *"/"* ]]; then
        release_ns=$(echo "$release_info" | cut -d'/' -f1)
        release_name=$(echo "$release_info" | cut -d'/' -f2)
    fi

    # Skip this release if namespace filtering is enabled and it's not in the target list
    if ! should_include_namespace "$release_ns"; then
      log_debug "Skipping helm release $release_name in namespace $release_ns (not in target list)"
      continue
    fi

    log_info "--> Processing Helm release $release_name in namespace $release_ns"

    release_dir="$helm_dir/releases/ns=$release_ns/$release_name"
    ensure_directory "$release_dir"

    # Get Helm values
    safe_exec "helm get values '$release_name' -n '$release_ns'" "$release_dir/values.yaml" "Helm values for $release_name"
    safe_exec "helm get values '$release_name' -n '$release_ns' --all" "$release_dir/all-values.yaml" "All Helm values for $release_name"

    # Get manifest
    safe_exec "helm get manifest '$release_name' -n '$release_ns'" "$release_dir/manifest.yaml" "Helm manifest for $release_name"

    # Get hooks
    safe_exec "helm get hooks '$release_name' -n '$release_ns'" "$release_dir/hooks.yaml" "Helm hooks for $release_name"

    # Get notes
    safe_exec "helm get notes '$release_name' -n '$release_ns'" "$release_dir/notes.txt" "Helm notes for $release_name"

    # Get release history
    safe_exec "helm history '$release_name' -n '$release_ns'" "$release_dir/history.txt" "Helm history for $release_name"
    safe_exec "helm history '$release_name' -n '$release_ns' -o yaml" "$release_dir/history.yaml" "Helm history (YAML) for $release_name"

    # Get status
    safe_exec "helm status '$release_name' -n '$release_ns'" "$release_dir/status.txt" "Helm status for $release_name"
    safe_exec "helm status '$release_name' -n '$release_ns' -o yaml" "$release_dir/status.yaml" "Helm status (YAML) for $release_name"

    # Remove secrets from manifests if not explicitly included
    if [[ "${RHDH_WITH_SECRETS:-false}" != "true" ]]; then
        if [[ -f "$release_dir/manifest.yaml" ]]; then
            # Create a temporary file without Secret resources
            yq eval 'select(.kind != "Secret")' "$release_dir/manifest.yaml" > "$release_dir/manifest.yaml.tmp" && mv "$release_dir/manifest.yaml.tmp" "$release_dir/manifest.yaml"
            log_debug "Removed Secret resources from Helm manifest for $release_name"
        fi
        if [[ -f "$release_dir/hooks.yaml" ]]; then
            yq eval 'select(.kind != "Secret")' "$release_dir/hooks.yaml" > "$release_dir/hooks.yaml.tmp" && mv "$release_dir/hooks.yaml.tmp" "$release_dir/hooks.yaml"
            log_debug "Removed Secret resources from Helm hooks for $release_name"
        fi
    fi

    # Collect app-specific info
    deploy=$(yq -r 'select(.kind=="Deployment") | .metadata.name' < "$release_dir/manifest.yaml" || true)
    statefulset=$(yq -r 'select(.kind=="StatefulSet") | .metadata.name' < "$release_dir/manifest.yaml" || true)
    collect_rhdh_data "$release_ns" "$deploy" "$statefulset" "$release_dir"
done

log_success "Helm data collection completed."